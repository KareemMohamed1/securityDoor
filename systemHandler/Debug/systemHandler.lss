
systemHandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001110  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000bb8  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 30 02 	call	0x460	; 0x460 <main>
  64:	0c 94 c9 02 	jmp	0x592	; 0x592 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
  74:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_init>
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	00 d0       	rcall	.+0      	; 0x84 <EEPROM_writeByte+0x6>
  84:	00 d0       	rcall	.+0      	; 0x86 <EEPROM_writeByte+0x8>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
  90:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_START)
  94:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	11 f0       	breq	.+4      	; 0xa0 <EEPROM_writeByte+0x22>
		return ERROR;
  9c:	1c 82       	std	Y+4, r1	; 0x04
  9e:	28 c0       	rjmp	.+80     	; 0xf0 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	80 70       	andi	r24, 0x00	; 0
  a6:	97 70       	andi	r25, 0x07	; 7
  a8:	88 0f       	add	r24, r24
  aa:	89 2f       	mov	r24, r25
  ac:	88 1f       	adc	r24, r24
  ae:	99 0b       	sbc	r25, r25
  b0:	91 95       	neg	r25
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
  b8:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
  bc:	88 31       	cpi	r24, 0x18	; 24
  be:	11 f0       	breq	.+4      	; 0xc4 <EEPROM_writeByte+0x46>
		return ERROR;
  c0:	1c 82       	std	Y+4, r1	; 0x04
  c2:	16 c0       	rjmp	.+44     	; 0xf0 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
  ca:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
  ce:	88 32       	cpi	r24, 0x28	; 40
  d0:	11 f0       	breq	.+4      	; 0xd6 <EEPROM_writeByte+0x58>
		return ERROR;
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	0d c0       	rjmp	.+26     	; 0xf0 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_write(u8data);
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
  dc:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	11 f0       	breq	.+4      	; 0xe8 <EEPROM_writeByte+0x6a>
		return ERROR;
  e4:	1c 82       	std	Y+4, r1	; 0x04
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
  e8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TWI_stop>

	return SUCCESS;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8c 83       	std	Y+4, r24	; 0x04
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	00 d0       	rcall	.+0      	; 0x106 <EEPROM_readByte+0x6>
 106:	00 d0       	rcall	.+0      	; 0x108 <EEPROM_readByte+0x8>
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	7c 83       	std	Y+4, r23	; 0x04
 114:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
 116:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_START)
 11a:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	11 f0       	breq	.+4      	; 0x126 <EEPROM_readByte+0x26>
		return ERROR;
 122:	1d 82       	std	Y+5, r1	; 0x05
 124:	44 c0       	rjmp	.+136    	; 0x1ae <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	80 70       	andi	r24, 0x00	; 0
 12c:	97 70       	andi	r25, 0x07	; 7
 12e:	88 0f       	add	r24, r24
 130:	89 2f       	mov	r24, r25
 132:	88 1f       	adc	r24, r24
 134:	99 0b       	sbc	r25, r25
 136:	91 95       	neg	r25
 138:	80 6a       	ori	r24, 0xA0	; 160
 13a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 13e:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 142:	88 31       	cpi	r24, 0x18	; 24
 144:	11 f0       	breq	.+4      	; 0x14a <EEPROM_readByte+0x4a>
		return ERROR;
 146:	1d 82       	std	Y+5, r1	; 0x05
 148:	32 c0       	rjmp	.+100    	; 0x1ae <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 150:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 154:	88 32       	cpi	r24, 0x28	; 40
 156:	11 f0       	breq	.+4      	; 0x15c <EEPROM_readByte+0x5c>
		return ERROR;
 158:	1d 82       	std	Y+5, r1	; 0x05
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
 15c:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
 160:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 164:	80 31       	cpi	r24, 0x10	; 16
 166:	11 f0       	breq	.+4      	; 0x16c <EEPROM_readByte+0x6c>
		return ERROR;
 168:	1d 82       	std	Y+5, r1	; 0x05
 16a:	21 c0       	rjmp	.+66     	; 0x1ae <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	80 70       	andi	r24, 0x00	; 0
 172:	97 70       	andi	r25, 0x07	; 7
 174:	88 0f       	add	r24, r24
 176:	89 2f       	mov	r24, r25
 178:	88 1f       	adc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	91 95       	neg	r25
 17e:	81 6a       	ori	r24, 0xA1	; 161
 180:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 184:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	11 f0       	breq	.+4      	; 0x190 <EEPROM_readByte+0x90>
		return ERROR;
 18c:	1d 82       	std	Y+5, r1	; 0x05
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readWithNACK();
 190:	0e 94 0e 02 	call	0x41c	; 0x41c <TWI_readWithNACK>
 194:	eb 81       	ldd	r30, Y+3	; 0x03
 196:	fc 81       	ldd	r31, Y+4	; 0x04
 198:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK)
 19a:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 19e:	88 35       	cpi	r24, 0x58	; 88
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <EEPROM_readByte+0xa6>
		return ERROR;
 1a2:	1d 82       	std	Y+5, r1	; 0x05
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
 1a6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TWI_stop>
	return SUCCESS;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	8d 83       	std	Y+5, r24	; 0x05
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <EEPROM_writeArray>:


uint8 EEPROM_writeArray(uint16 u16addr, uint8 * u8data,uint8 size)
{
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	27 97       	sbiw	r28, 0x07	; 7
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	9b 83       	std	Y+3, r25	; 0x03
 1d6:	8a 83       	std	Y+2, r24	; 0x02
 1d8:	7d 83       	std	Y+5, r23	; 0x05
 1da:	6c 83       	std	Y+4, r22	; 0x04
 1dc:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
	TWI_start();
 1de:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_START)
 1e2:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	11 f0       	breq	.+4      	; 0x1ee <EEPROM_writeArray+0x2e>
		return ERROR;
 1ea:	1f 82       	std	Y+7, r1	; 0x07
 1ec:	39 c0       	rjmp	.+114    	; 0x260 <EEPROM_writeArray+0xa0>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9b 81       	ldd	r25, Y+3	; 0x03
 1f2:	80 70       	andi	r24, 0x00	; 0
 1f4:	97 70       	andi	r25, 0x07	; 7
 1f6:	88 0f       	add	r24, r24
 1f8:	89 2f       	mov	r24, r25
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 0b       	sbc	r25, r25
 1fe:	91 95       	neg	r25
 200:	80 6a       	ori	r24, 0xA0	; 160
 202:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 206:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 20a:	88 31       	cpi	r24, 0x18	; 24
 20c:	11 f0       	breq	.+4      	; 0x212 <EEPROM_writeArray+0x52>
		return ERROR;
 20e:	1f 82       	std	Y+7, r1	; 0x07
 210:	27 c0       	rjmp	.+78     	; 0x260 <EEPROM_writeArray+0xa0>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 218:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 21c:	88 32       	cpi	r24, 0x28	; 40
 21e:	11 f0       	breq	.+4      	; 0x224 <EEPROM_writeArray+0x64>
		return ERROR;
 220:	1f 82       	std	Y+7, r1	; 0x07
 222:	1e c0       	rjmp	.+60     	; 0x260 <EEPROM_writeArray+0xa0>

	/* write byte to eeprom */
	for(i=0;i<size;i++){
 224:	19 82       	std	Y+1, r1	; 0x01
 226:	14 c0       	rjmp	.+40     	; 0x250 <EEPROM_writeArray+0x90>
		TWI_write(u8data[i]);
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	8c 81       	ldd	r24, Y+4	; 0x04
 230:	9d 81       	ldd	r25, Y+5	; 0x05
 232:	fc 01       	movw	r30, r24
 234:	e2 0f       	add	r30, r18
 236:	f3 1f       	adc	r31, r19
 238:	80 81       	ld	r24, Z
 23a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
		if (TWI_getStatus() != TW_MT_DATA_ACK)
 23e:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 242:	88 32       	cpi	r24, 0x28	; 40
 244:	11 f0       	breq	.+4      	; 0x24a <EEPROM_writeArray+0x8a>
			return ERROR;
 246:	1f 82       	std	Y+7, r1	; 0x07
 248:	0b c0       	rjmp	.+22     	; 0x260 <EEPROM_writeArray+0xa0>
	TWI_write((uint8)(u16addr));
	if (TWI_getStatus() != TW_MT_DATA_ACK)
		return ERROR;

	/* write byte to eeprom */
	for(i=0;i<size;i++){
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	99 81       	ldd	r25, Y+1	; 0x01
 252:	8e 81       	ldd	r24, Y+6	; 0x06
 254:	98 17       	cp	r25, r24
 256:	40 f3       	brcs	.-48     	; 0x228 <EEPROM_writeArray+0x68>
		TWI_write(u8data[i]);
		if (TWI_getStatus() != TW_MT_DATA_ACK)
			return ERROR;
	}
	/* Send the Stop Bit */
	TWI_stop();
 258:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TWI_stop>
	return SUCCESS;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	8f 83       	std	Y+7, r24	; 0x07
 260:	8f 81       	ldd	r24, Y+7	; 0x07
}
 262:	27 96       	adiw	r28, 0x07	; 7
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	08 95       	ret

00000274 <EEPROM_readArray>:



uint8 EEPROM_readArray(uint16 u16addr, uint8 *u8data,uint8 size)
{
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	27 97       	sbiw	r28, 0x07	; 7
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	9b 83       	std	Y+3, r25	; 0x03
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	7d 83       	std	Y+5, r23	; 0x05
 292:	6c 83       	std	Y+4, r22	; 0x04
 294:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
	TWI_start();
 296:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_START)
 29a:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <EEPROM_readArray+0x32>
		return ERROR;
 2a2:	1f 82       	std	Y+7, r1	; 0x07
 2a4:	54 c0       	rjmp	.+168    	; 0x34e <EEPROM_readArray+0xda>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	9b 81       	ldd	r25, Y+3	; 0x03
 2aa:	80 70       	andi	r24, 0x00	; 0
 2ac:	97 70       	andi	r25, 0x07	; 7
 2ae:	88 0f       	add	r24, r24
 2b0:	89 2f       	mov	r24, r25
 2b2:	88 1f       	adc	r24, r24
 2b4:	99 0b       	sbc	r25, r25
 2b6:	91 95       	neg	r25
 2b8:	80 6a       	ori	r24, 0xA0	; 160
 2ba:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 2be:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 2c2:	88 31       	cpi	r24, 0x18	; 24
 2c4:	11 f0       	breq	.+4      	; 0x2ca <EEPROM_readArray+0x56>
		return ERROR;
 2c6:	1f 82       	std	Y+7, r1	; 0x07
 2c8:	42 c0       	rjmp	.+132    	; 0x34e <EEPROM_readArray+0xda>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 2d0:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 2d4:	88 32       	cpi	r24, 0x28	; 40
 2d6:	11 f0       	breq	.+4      	; 0x2dc <EEPROM_readArray+0x68>
		return ERROR;
 2d8:	1f 82       	std	Y+7, r1	; 0x07
 2da:	39 c0       	rjmp	.+114    	; 0x34e <EEPROM_readArray+0xda>

	/* Send the Repeated Start Bit */
	TWI_start();
 2dc:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
 2e0:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 2e4:	80 31       	cpi	r24, 0x10	; 16
 2e6:	11 f0       	breq	.+4      	; 0x2ec <EEPROM_readArray+0x78>
		return ERROR;
 2e8:	1f 82       	std	Y+7, r1	; 0x07
 2ea:	31 c0       	rjmp	.+98     	; 0x34e <EEPROM_readArray+0xda>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	9b 81       	ldd	r25, Y+3	; 0x03
 2f0:	80 70       	andi	r24, 0x00	; 0
 2f2:	97 70       	andi	r25, 0x07	; 7
 2f4:	88 0f       	add	r24, r24
 2f6:	89 2f       	mov	r24, r25
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 0b       	sbc	r25, r25
 2fc:	91 95       	neg	r25
 2fe:	81 6a       	ori	r24, 0xA1	; 161
 300:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 304:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 308:	80 34       	cpi	r24, 0x40	; 64
 30a:	11 f0       	breq	.+4      	; 0x310 <EEPROM_readArray+0x9c>
		return ERROR;
 30c:	1f 82       	std	Y+7, r1	; 0x07
 30e:	1f c0       	rjmp	.+62     	; 0x34e <EEPROM_readArray+0xda>

	/* Read Byte from Memory without send ACK */
	for(i =0 ; i <size ; i++){
 310:	19 82       	std	Y+1, r1	; 0x01
 312:	15 c0       	rjmp	.+42     	; 0x33e <EEPROM_readArray+0xca>
		u8data[i] = TWI_readWithNACK();
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	9d 81       	ldd	r25, Y+5	; 0x05
 31e:	8c 01       	movw	r16, r24
 320:	02 0f       	add	r16, r18
 322:	13 1f       	adc	r17, r19
 324:	0e 94 0e 02 	call	0x41c	; 0x41c <TWI_readWithNACK>
 328:	f8 01       	movw	r30, r16
 32a:	80 83       	st	Z, r24
		if (TWI_getStatus() != TW_MR_DATA_NACK)
 32c:	0e 94 21 02 	call	0x442	; 0x442 <TWI_getStatus>
 330:	88 35       	cpi	r24, 0x58	; 88
 332:	11 f0       	breq	.+4      	; 0x338 <EEPROM_readArray+0xc4>
			return ERROR;
 334:	1f 82       	std	Y+7, r1	; 0x07
 336:	0b c0       	rjmp	.+22     	; 0x34e <EEPROM_readArray+0xda>
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
		return ERROR;

	/* Read Byte from Memory without send ACK */
	for(i =0 ; i <size ; i++){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	89 83       	std	Y+1, r24	; 0x01
 33e:	99 81       	ldd	r25, Y+1	; 0x01
 340:	8e 81       	ldd	r24, Y+6	; 0x06
 342:	98 17       	cp	r25, r24
 344:	38 f3       	brcs	.-50     	; 0x314 <EEPROM_readArray+0xa0>
		u8data[i] = TWI_readWithNACK();
		if (TWI_getStatus() != TW_MR_DATA_NACK)
			return ERROR;
	}
	/* Send the Stop Bit */
	TWI_stop();
 346:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TWI_stop>
	return SUCCESS;
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	ff 83       	std	Y+7, r31	; 0x07
 34e:	8f 81       	ldd	r24, Y+7	; 0x07
}
 350:	27 96       	adiw	r28, 0x07	; 7
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
 36e:	e0 e2       	ldi	r30, 0x20	; 32
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	80 83       	st	Z, r24
	TWSR = 0x00;
 376:	e1 e2       	ldi	r30, 0x21	; 33
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
 37c:	e2 e2       	ldi	r30, 0x22	; 34
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
 384:	e6 e5       	ldi	r30, 0x56	; 86
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	80 83       	st	Z, r24
}
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <TWI_start>:

void TWI_start(void)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 39a:	e6 e5       	ldi	r30, 0x56	; 86
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	84 ea       	ldi	r24, 0xA4	; 164
 3a0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 3a2:	e6 e5       	ldi	r30, 0x56	; 86
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	dc f7       	brge	.-10     	; 0x3a2 <TWI_start+0x10>
}
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <TWI_stop>:

void TWI_stop(void)
{
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 3ba:	e6 e5       	ldi	r30, 0x56	; 86
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	84 e9       	ldi	r24, 0x94	; 148
 3c0:	80 83       	st	Z, r24
}
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <TWI_write>:

void TWI_write(uint8 data)
{
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	0f 92       	push	r0
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
 3d4:	e3 e2       	ldi	r30, 0x23	; 35
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 3dc:	e6 e5       	ldi	r30, 0x56	; 86
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	84 e8       	ldi	r24, 0x84	; 132
 3e2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 3e4:	e6 e5       	ldi	r30, 0x56	; 86
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 23       	and	r24, r24
 3ec:	dc f7       	brge	.-10     	; 0x3e4 <TWI_write+0x1c>
}
 3ee:	0f 90       	pop	r0
 3f0:	cf 91       	pop	r28
 3f2:	df 91       	pop	r29
 3f4:	08 95       	ret

000003f6 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
 3f6:	df 93       	push	r29
 3f8:	cf 93       	push	r28
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 3fe:	e6 e5       	ldi	r30, 0x56	; 86
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	84 ec       	ldi	r24, 0xC4	; 196
 404:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 406:	e6 e5       	ldi	r30, 0x56	; 86
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	dc f7       	brge	.-10     	; 0x406 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
 410:	e3 e2       	ldi	r30, 0x23	; 35
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
}
 416:	cf 91       	pop	r28
 418:	df 91       	pop	r29
 41a:	08 95       	ret

0000041c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
 41c:	df 93       	push	r29
 41e:	cf 93       	push	r28
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 424:	e6 e5       	ldi	r30, 0x56	; 86
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	84 e8       	ldi	r24, 0x84	; 132
 42a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 42c:	e6 e5       	ldi	r30, 0x56	; 86
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 23       	and	r24, r24
 434:	dc f7       	brge	.-10     	; 0x42c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
 436:	e3 e2       	ldi	r30, 0x23	; 35
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
}
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	0f 92       	push	r0
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 44c:	e1 e2       	ldi	r30, 0x21	; 33
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	88 7f       	andi	r24, 0xF8	; 248
 454:	89 83       	std	Y+1, r24	; 0x01
    return status;
 456:	89 81       	ldd	r24, Y+1	; 0x01
}
 458:	0f 90       	pop	r0
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <main>:
 *      Author: karee
 */

#include"uart.h"

int main (void){
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	ff cf       	rjmp	.-2      	; 0x468 <main+0x8>

0000046a <UART_init>:
 */


#include"uart.h"

void UART_init(void){
 46a:	df 93       	push	r29
 46c:	cf 93       	push	r28
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
	UCSRA |=(1<<U2X);
 472:	ab e2       	ldi	r26, 0x2B	; 43
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	eb e2       	ldi	r30, 0x2B	; 43
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	8c 93       	st	X, r24
	UCSRB =(1<<RXEN)|(1<<TXEN);
 480:	ea e2       	ldi	r30, 0x2A	; 42
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	88 e1       	ldi	r24, 0x18	; 24
 486:	80 83       	st	Z, r24
	UCSRC =(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 488:	e0 e4       	ldi	r30, 0x40	; 64
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	86 e8       	ldi	r24, 0x86	; 134
 48e:	80 83       	st	Z, r24
	UBRRL = 103;
 490:	e9 e2       	ldi	r30, 0x29	; 41
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	87 e6       	ldi	r24, 0x67	; 103
 496:	80 83       	st	Z, r24
}
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <UART_sendByte>:

void UART_sendByte(uint8 data){
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	0f 92       	push	r0
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
 4aa:	ec e2       	ldi	r30, 0x2C	; 44
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){}
 4b2:	eb e2       	ldi	r30, 0x2B	; 43
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	80 74       	andi	r24, 0x40	; 64
 4be:	90 70       	andi	r25, 0x00	; 0
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	b9 f3       	breq	.-18     	; 0x4b2 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
 4c4:	ab e2       	ldi	r26, 0x2B	; 43
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	eb e2       	ldi	r30, 0x2B	; 43
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	80 64       	ori	r24, 0x40	; 64
 4d0:	8c 93       	st	X, r24

}
 4d2:	0f 90       	pop	r0
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <UART_recieveByte>:

uint8 UART_recieveByte(void){
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 4e2:	eb e2       	ldi	r30, 0x2B	; 43
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	88 23       	and	r24, r24
 4ea:	dc f7       	brge	.-10     	; 0x4e2 <UART_recieveByte+0x8>
	return UDR;
 4ec:	ec e2       	ldi	r30, 0x2C	; 44
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
}
 4f2:	cf 91       	pop	r28
 4f4:	df 91       	pop	r29
 4f6:	08 95       	ret

000004f8 <UART_sendArray>:



void UART_sendArray(uint8 *data,uint8 size){
 4f8:	df 93       	push	r29
 4fa:	cf 93       	push	r28
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <UART_sendArray+0x6>
 4fe:	00 d0       	rcall	.+0      	; 0x500 <UART_sendArray+0x8>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	9b 83       	std	Y+3, r25	; 0x03
 506:	8a 83       	std	Y+2, r24	; 0x02
 508:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
 50a:	19 82       	std	Y+1, r1	; 0x01
 50c:	0e c0       	rjmp	.+28     	; 0x52a <UART_sendArray+0x32>
	while (i<size){
		UART_sendByte(data[i]);
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	9b 81       	ldd	r25, Y+3	; 0x03
 518:	fc 01       	movw	r30, r24
 51a:	e2 0f       	add	r30, r18
 51c:	f3 1f       	adc	r31, r19
 51e:	80 81       	ld	r24, Z
 520:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_sendByte>
		i++;
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	89 83       	std	Y+1, r24	; 0x01



void UART_sendArray(uint8 *data,uint8 size){
	uint8 i=0;
	while (i<size){
 52a:	99 81       	ldd	r25, Y+1	; 0x01
 52c:	8c 81       	ldd	r24, Y+4	; 0x04
 52e:	98 17       	cp	r25, r24
 530:	70 f3       	brcs	.-36     	; 0x50e <UART_sendArray+0x16>
		UART_sendByte(data[i]);
		i++;
	}
}
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	08 95       	ret

00000540 <UART_recieveArray>:
 void UART_recieveArray(uint8 *data, uint8 size){
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	df 93       	push	r29
 546:	cf 93       	push	r28
 548:	00 d0       	rcall	.+0      	; 0x54a <UART_recieveArray+0xa>
 54a:	00 d0       	rcall	.+0      	; 0x54c <UART_recieveArray+0xc>
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	9b 83       	std	Y+3, r25	; 0x03
 552:	8a 83       	std	Y+2, r24	; 0x02
 554:	6c 83       	std	Y+4, r22	; 0x04
	 uint8 i =0;
 556:	19 82       	std	Y+1, r1	; 0x01
 558:	0f c0       	rjmp	.+30     	; 0x578 <UART_recieveArray+0x38>
	 while(i<size){
		 data[i] = UART_recieveByte();
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	9b 81       	ldd	r25, Y+3	; 0x03
 564:	8c 01       	movw	r16, r24
 566:	02 0f       	add	r16, r18
 568:	13 1f       	adc	r17, r19
 56a:	0e 94 6d 02 	call	0x4da	; 0x4da <UART_recieveByte>
 56e:	f8 01       	movw	r30, r16
 570:	80 83       	st	Z, r24
		 i++;
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}
}
 void UART_recieveArray(uint8 *data, uint8 size){
	 uint8 i =0;
	 while(i<size){
 578:	99 81       	ldd	r25, Y+1	; 0x01
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	98 17       	cp	r25, r24
 57e:	68 f3       	brcs	.-38     	; 0x55a <UART_recieveArray+0x1a>
		 data[i] = UART_recieveByte();
		 i++;
	 }
}
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
