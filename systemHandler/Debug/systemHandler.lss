
systemHandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00800062  00800062  0000081e  2**0
                  ALLOC
  3 .stab         000014b8  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c63  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 32       	cpi	r26, 0x2C	; 44
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
  8a:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
  9a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <TWI_init>
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	00 d0       	rcall	.+0      	; 0xaa <EEPROM_writeByte+0x6>
  aa:	00 d0       	rcall	.+0      	; 0xac <EEPROM_writeByte+0x8>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
  b6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_START)
  ba:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	11 f0       	breq	.+4      	; 0xc6 <EEPROM_writeByte+0x22>
		return ERROR;
  c2:	1c 82       	std	Y+4, r1	; 0x04
  c4:	28 c0       	rjmp	.+80     	; 0x116 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 70       	andi	r24, 0x00	; 0
  cc:	97 70       	andi	r25, 0x07	; 7
  ce:	88 0f       	add	r24, r24
  d0:	89 2f       	mov	r24, r25
  d2:	88 1f       	adc	r24, r24
  d4:	99 0b       	sbc	r25, r25
  d6:	91 95       	neg	r25
  d8:	80 6a       	ori	r24, 0xA0	; 160
  da:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
  de:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
  e2:	88 31       	cpi	r24, 0x18	; 24
  e4:	11 f0       	breq	.+4      	; 0xea <EEPROM_writeByte+0x46>
		return ERROR;
  e6:	1c 82       	std	Y+4, r1	; 0x04
  e8:	16 c0       	rjmp	.+44     	; 0x116 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
  f0:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
  f4:	88 32       	cpi	r24, 0x28	; 40
  f6:	11 f0       	breq	.+4      	; 0xfc <EEPROM_writeByte+0x58>
		return ERROR;
  f8:	1c 82       	std	Y+4, r1	; 0x04
  fa:	0d c0       	rjmp	.+26     	; 0x116 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_write(u8data);
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 102:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 106:	88 32       	cpi	r24, 0x28	; 40
 108:	11 f0       	breq	.+4      	; 0x10e <EEPROM_writeByte+0x6a>
		return ERROR;
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	04 c0       	rjmp	.+8      	; 0x116 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
 10e:	0e 94 07 02 	call	0x40e	; 0x40e <TWI_stop>

	return SUCCESS;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8c 83       	std	Y+4, r24	; 0x04
 116:	8c 81       	ldd	r24, Y+4	; 0x04
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	00 d0       	rcall	.+0      	; 0x12c <EEPROM_readByte+0x6>
 12c:	00 d0       	rcall	.+0      	; 0x12e <EEPROM_readByte+0x8>
 12e:	0f 92       	push	r0
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	7c 83       	std	Y+4, r23	; 0x04
 13a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
 13c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_START)
 140:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	11 f0       	breq	.+4      	; 0x14c <EEPROM_readByte+0x26>
		return ERROR;
 148:	1d 82       	std	Y+5, r1	; 0x05
 14a:	44 c0       	rjmp	.+136    	; 0x1d4 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	80 70       	andi	r24, 0x00	; 0
 152:	97 70       	andi	r25, 0x07	; 7
 154:	88 0f       	add	r24, r24
 156:	89 2f       	mov	r24, r25
 158:	88 1f       	adc	r24, r24
 15a:	99 0b       	sbc	r25, r25
 15c:	91 95       	neg	r25
 15e:	80 6a       	ori	r24, 0xA0	; 160
 160:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 164:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 168:	88 31       	cpi	r24, 0x18	; 24
 16a:	11 f0       	breq	.+4      	; 0x170 <EEPROM_readByte+0x4a>
		return ERROR;
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	32 c0       	rjmp	.+100    	; 0x1d4 <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 176:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 17a:	88 32       	cpi	r24, 0x28	; 40
 17c:	11 f0       	breq	.+4      	; 0x182 <EEPROM_readByte+0x5c>
		return ERROR;
 17e:	1d 82       	std	Y+5, r1	; 0x05
 180:	29 c0       	rjmp	.+82     	; 0x1d4 <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
 182:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
 186:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 18a:	80 31       	cpi	r24, 0x10	; 16
 18c:	11 f0       	breq	.+4      	; 0x192 <EEPROM_readByte+0x6c>
		return ERROR;
 18e:	1d 82       	std	Y+5, r1	; 0x05
 190:	21 c0       	rjmp	.+66     	; 0x1d4 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	80 70       	andi	r24, 0x00	; 0
 198:	97 70       	andi	r25, 0x07	; 7
 19a:	88 0f       	add	r24, r24
 19c:	89 2f       	mov	r24, r25
 19e:	88 1f       	adc	r24, r24
 1a0:	99 0b       	sbc	r25, r25
 1a2:	91 95       	neg	r25
 1a4:	81 6a       	ori	r24, 0xA1	; 161
 1a6:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 1aa:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 1ae:	80 34       	cpi	r24, 0x40	; 64
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <EEPROM_readByte+0x90>
		return ERROR;
 1b2:	1d 82       	std	Y+5, r1	; 0x05
 1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readWithNACK();
 1b6:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_readWithNACK>
 1ba:	eb 81       	ldd	r30, Y+3	; 0x03
 1bc:	fc 81       	ldd	r31, Y+4	; 0x04
 1be:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK)
 1c0:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 1c4:	88 35       	cpi	r24, 0x58	; 88
 1c6:	11 f0       	breq	.+4      	; 0x1cc <EEPROM_readByte+0xa6>
		return ERROR;
 1c8:	1d 82       	std	Y+5, r1	; 0x05
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
 1cc:	0e 94 07 02 	call	0x40e	; 0x40e <TWI_stop>
	return SUCCESS;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	8d 83       	std	Y+5, r24	; 0x05
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <EEPROM_writeArray>:


uint8 EEPROM_writeArray(uint16 u16addr, uint8 * u8data,uint8 size)
{
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	27 97       	sbiw	r28, 0x07	; 7
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	9b 83       	std	Y+3, r25	; 0x03
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	7d 83       	std	Y+5, r23	; 0x05
 200:	6c 83       	std	Y+4, r22	; 0x04
 202:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
	TWI_start();
 204:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_START)
 208:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	11 f0       	breq	.+4      	; 0x214 <EEPROM_writeArray+0x2e>
		return ERROR;
 210:	1f 82       	std	Y+7, r1	; 0x07
 212:	39 c0       	rjmp	.+114    	; 0x286 <EEPROM_writeArray+0xa0>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	9b 81       	ldd	r25, Y+3	; 0x03
 218:	80 70       	andi	r24, 0x00	; 0
 21a:	97 70       	andi	r25, 0x07	; 7
 21c:	88 0f       	add	r24, r24
 21e:	89 2f       	mov	r24, r25
 220:	88 1f       	adc	r24, r24
 222:	99 0b       	sbc	r25, r25
 224:	91 95       	neg	r25
 226:	80 6a       	ori	r24, 0xA0	; 160
 228:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 22c:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 230:	88 31       	cpi	r24, 0x18	; 24
 232:	11 f0       	breq	.+4      	; 0x238 <EEPROM_writeArray+0x52>
		return ERROR;
 234:	1f 82       	std	Y+7, r1	; 0x07
 236:	27 c0       	rjmp	.+78     	; 0x286 <EEPROM_writeArray+0xa0>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 23e:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 242:	88 32       	cpi	r24, 0x28	; 40
 244:	11 f0       	breq	.+4      	; 0x24a <EEPROM_writeArray+0x64>
		return ERROR;
 246:	1f 82       	std	Y+7, r1	; 0x07
 248:	1e c0       	rjmp	.+60     	; 0x286 <EEPROM_writeArray+0xa0>

	/* write byte to eeprom */
	for(i=0;i<size;i++){
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	14 c0       	rjmp	.+40     	; 0x276 <EEPROM_writeArray+0x90>
		TWI_write(u8data[i]);
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	9d 81       	ldd	r25, Y+5	; 0x05
 258:	fc 01       	movw	r30, r24
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	80 81       	ld	r24, Z
 260:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
		if (TWI_getStatus() != TW_MT_DATA_ACK)
 264:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 268:	88 32       	cpi	r24, 0x28	; 40
 26a:	11 f0       	breq	.+4      	; 0x270 <EEPROM_writeArray+0x8a>
			return ERROR;
 26c:	1f 82       	std	Y+7, r1	; 0x07
 26e:	0b c0       	rjmp	.+22     	; 0x286 <EEPROM_writeArray+0xa0>
	TWI_write((uint8)(u16addr));
	if (TWI_getStatus() != TW_MT_DATA_ACK)
		return ERROR;

	/* write byte to eeprom */
	for(i=0;i<size;i++){
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	99 81       	ldd	r25, Y+1	; 0x01
 278:	8e 81       	ldd	r24, Y+6	; 0x06
 27a:	98 17       	cp	r25, r24
 27c:	40 f3       	brcs	.-48     	; 0x24e <EEPROM_writeArray+0x68>
		TWI_write(u8data[i]);
		if (TWI_getStatus() != TW_MT_DATA_ACK)
			return ERROR;
	}
	/* Send the Stop Bit */
	TWI_stop();
 27e:	0e 94 07 02 	call	0x40e	; 0x40e <TWI_stop>
	return SUCCESS;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	8f 83       	std	Y+7, r24	; 0x07
 286:	8f 81       	ldd	r24, Y+7	; 0x07
}
 288:	27 96       	adiw	r28, 0x07	; 7
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	08 95       	ret

0000029a <EEPROM_readArray>:



uint8 EEPROM_readArray(uint16 u16addr, uint8 *u8data,uint8 size)
{
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	27 97       	sbiw	r28, 0x07	; 7
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	9b 83       	std	Y+3, r25	; 0x03
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	7d 83       	std	Y+5, r23	; 0x05
 2b8:	6c 83       	std	Y+4, r22	; 0x04
 2ba:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
	TWI_start();
 2bc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_START)
 2c0:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	11 f0       	breq	.+4      	; 0x2cc <EEPROM_readArray+0x32>
		return ERROR;
 2c8:	1f 82       	std	Y+7, r1	; 0x07
 2ca:	6f c0       	rjmp	.+222    	; 0x3aa <EEPROM_readArray+0x110>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	9b 81       	ldd	r25, Y+3	; 0x03
 2d0:	80 70       	andi	r24, 0x00	; 0
 2d2:	97 70       	andi	r25, 0x07	; 7
 2d4:	88 0f       	add	r24, r24
 2d6:	89 2f       	mov	r24, r25
 2d8:	88 1f       	adc	r24, r24
 2da:	99 0b       	sbc	r25, r25
 2dc:	91 95       	neg	r25
 2de:	80 6a       	ori	r24, 0xA0	; 160
 2e0:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 2e4:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 2e8:	88 31       	cpi	r24, 0x18	; 24
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <EEPROM_readArray+0x56>
		return ERROR;
 2ec:	1f 82       	std	Y+7, r1	; 0x07
 2ee:	5d c0       	rjmp	.+186    	; 0x3aa <EEPROM_readArray+0x110>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
 2f6:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 2fa:	88 32       	cpi	r24, 0x28	; 40
 2fc:	11 f0       	breq	.+4      	; 0x302 <EEPROM_readArray+0x68>
		return ERROR;
 2fe:	1f 82       	std	Y+7, r1	; 0x07
 300:	54 c0       	rjmp	.+168    	; 0x3aa <EEPROM_readArray+0x110>

	/* Send the Repeated Start Bit */
	TWI_start();
 302:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
 306:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 30a:	80 31       	cpi	r24, 0x10	; 16
 30c:	11 f0       	breq	.+4      	; 0x312 <EEPROM_readArray+0x78>
		return ERROR;
 30e:	1f 82       	std	Y+7, r1	; 0x07
 310:	4c c0       	rjmp	.+152    	; 0x3aa <EEPROM_readArray+0x110>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	9b 81       	ldd	r25, Y+3	; 0x03
 316:	80 70       	andi	r24, 0x00	; 0
 318:	97 70       	andi	r25, 0x07	; 7
 31a:	88 0f       	add	r24, r24
 31c:	89 2f       	mov	r24, r25
 31e:	88 1f       	adc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	91 95       	neg	r25
 324:	81 6a       	ori	r24, 0xA1	; 161
 326:	0e 94 12 02 	call	0x424	; 0x424 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 32a:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 32e:	80 34       	cpi	r24, 0x40	; 64
 330:	11 f0       	breq	.+4      	; 0x336 <EEPROM_readArray+0x9c>
		return ERROR;
 332:	1f 82       	std	Y+7, r1	; 0x07
 334:	3a c0       	rjmp	.+116    	; 0x3aa <EEPROM_readArray+0x110>

	/* Read Byte from Memory without send ACK */
	for(i =0 ; i <size-1 ; i++){
 336:	19 82       	std	Y+1, r1	; 0x01
 338:	15 c0       	rjmp	.+42     	; 0x364 <EEPROM_readArray+0xca>
		u8data[i] = TWI_readWithACK();
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	8c 01       	movw	r16, r24
 346:	02 0f       	add	r16, r18
 348:	13 1f       	adc	r17, r19
 34a:	0e 94 29 02 	call	0x452	; 0x452 <TWI_readWithACK>
 34e:	f8 01       	movw	r30, r16
 350:	80 83       	st	Z, r24
		if (TWI_getStatus() != TW_MR_DATA_ACK)
 352:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 356:	80 35       	cpi	r24, 0x50	; 80
 358:	11 f0       	breq	.+4      	; 0x35e <EEPROM_readArray+0xc4>
			return ERROR;
 35a:	1f 82       	std	Y+7, r1	; 0x07
 35c:	26 c0       	rjmp	.+76     	; 0x3aa <EEPROM_readArray+0x110>
	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
		return ERROR;

	/* Read Byte from Memory without send ACK */
	for(i =0 ; i <size-1 ; i++){
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	8e 81       	ldd	r24, Y+6	; 0x06
 36c:	88 2f       	mov	r24, r24
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	28 17       	cp	r18, r24
 374:	39 07       	cpc	r19, r25
 376:	0c f3       	brlt	.-62     	; 0x33a <EEPROM_readArray+0xa0>
		u8data[i] = TWI_readWithACK();
		if (TWI_getStatus() != TW_MR_DATA_ACK)
			return ERROR;
	}
	u8data[size-1]=TWI_readWithNACK();
 378:	8e 81       	ldd	r24, Y+6	; 0x06
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	9c 01       	movw	r18, r24
 380:	21 50       	subi	r18, 0x01	; 1
 382:	30 40       	sbci	r19, 0x00	; 0
 384:	8c 81       	ldd	r24, Y+4	; 0x04
 386:	9d 81       	ldd	r25, Y+5	; 0x05
 388:	8c 01       	movw	r16, r24
 38a:	02 0f       	add	r16, r18
 38c:	13 1f       	adc	r17, r19
 38e:	0e 94 3c 02 	call	0x478	; 0x478 <TWI_readWithNACK>
 392:	f8 01       	movw	r30, r16
 394:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK)
 396:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_getStatus>
 39a:	88 35       	cpi	r24, 0x58	; 88
 39c:	11 f0       	breq	.+4      	; 0x3a2 <EEPROM_readArray+0x108>
		return ERROR;
 39e:	1f 82       	std	Y+7, r1	; 0x07
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <EEPROM_readArray+0x110>
	/* Send the Stop Bit */
	TWI_stop();
 3a2:	0e 94 07 02 	call	0x40e	; 0x40e <TWI_stop>
	return SUCCESS;
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	ff 83       	std	Y+7, r31	; 0x07
 3aa:	8f 81       	ldd	r24, Y+7	; 0x07
}
 3ac:	27 96       	adiw	r28, 0x07	; 7
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	cf 91       	pop	r28
 3ba:	df 91       	pop	r29
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
 3ca:	e0 e2       	ldi	r30, 0x20	; 32
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
	TWSR = 0x00;
 3d2:	e1 e2       	ldi	r30, 0x21	; 33
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
 3d8:	e2 e2       	ldi	r30, 0x22	; 34
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
 3e0:	e6 e5       	ldi	r30, 0x56	; 86
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	80 83       	st	Z, r24
}
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	08 95       	ret

000003ee <TWI_start>:

void TWI_start(void)
{
 3ee:	df 93       	push	r29
 3f0:	cf 93       	push	r28
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 3f6:	e6 e5       	ldi	r30, 0x56	; 86
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	84 ea       	ldi	r24, 0xA4	; 164
 3fc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 3fe:	e6 e5       	ldi	r30, 0x56	; 86
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	88 23       	and	r24, r24
 406:	dc f7       	brge	.-10     	; 0x3fe <TWI_start+0x10>
}
 408:	cf 91       	pop	r28
 40a:	df 91       	pop	r29
 40c:	08 95       	ret

0000040e <TWI_stop>:

void TWI_stop(void)
{
 40e:	df 93       	push	r29
 410:	cf 93       	push	r28
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 416:	e6 e5       	ldi	r30, 0x56	; 86
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	84 e9       	ldi	r24, 0x94	; 148
 41c:	80 83       	st	Z, r24
}
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <TWI_write>:

void TWI_write(uint8 data)
{
 424:	df 93       	push	r29
 426:	cf 93       	push	r28
 428:	0f 92       	push	r0
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
 430:	e3 e2       	ldi	r30, 0x23	; 35
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 438:	e6 e5       	ldi	r30, 0x56	; 86
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	84 e8       	ldi	r24, 0x84	; 132
 43e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 440:	e6 e5       	ldi	r30, 0x56	; 86
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	88 23       	and	r24, r24
 448:	dc f7       	brge	.-10     	; 0x440 <TWI_write+0x1c>
}
 44a:	0f 90       	pop	r0
 44c:	cf 91       	pop	r28
 44e:	df 91       	pop	r29
 450:	08 95       	ret

00000452 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 45a:	e6 e5       	ldi	r30, 0x56	; 86
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	84 ec       	ldi	r24, 0xC4	; 196
 460:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 462:	e6 e5       	ldi	r30, 0x56	; 86
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	dc f7       	brge	.-10     	; 0x462 <__stack+0x3>
    /* Read Data */
    return TWDR;
 46c:	e3 e2       	ldi	r30, 0x23	; 35
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
}
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 480:	e6 e5       	ldi	r30, 0x56	; 86
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	84 e8       	ldi	r24, 0x84	; 132
 486:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 488:	e6 e5       	ldi	r30, 0x56	; 86
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	88 23       	and	r24, r24
 490:	dc f7       	brge	.-10     	; 0x488 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
 492:	e3 e2       	ldi	r30, 0x23	; 35
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
}
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	0f 92       	push	r0
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 4a8:	e1 e2       	ldi	r30, 0x21	; 33
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	88 7f       	andi	r24, 0xF8	; 248
 4b0:	89 83       	std	Y+1, r24	; 0x01
    return status;
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 4b4:	0f 90       	pop	r0
 4b6:	cf 91       	pop	r28
 4b8:	df 91       	pop	r29
 4ba:	08 95       	ret

000004bc <main>:
uint8 size;
uint8 PassmatchFlag=1;
uint8 state;


int main (void){
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <main+0x6>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<PB7)|(1<<PB6)|(1<<PB5);
 4c6:	a7 e3       	ldi	r26, 0x37	; 55
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e7 e3       	ldi	r30, 0x37	; 55
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 6e       	ori	r24, 0xE0	; 224
 4d2:	8c 93       	st	X, r24
	PORTB |=(1<<PB5);
 4d4:	a8 e3       	ldi	r26, 0x38	; 56
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e8 e3       	ldi	r30, 0x38	; 56
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	80 62       	ori	r24, 0x20	; 32
 4e0:	8c 93       	st	X, r24
	uint8 i=0;
 4e2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 j=0;
 4e4:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_init();
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_init>
	UART_init();
 4ea:	0e 94 2e 03 	call	0x65c	; 0x65c <UART_init>
	while(1){
		state = UART_recieveByte();
 4ee:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 4f2:	80 93 62 00 	sts	0x0062, r24
		if(state =='*'){
 4f6:	80 91 62 00 	lds	r24, 0x0062
 4fa:	8a 32       	cpi	r24, 0x2A	; 42
 4fc:	09 f0       	breq	.+2      	; 0x500 <main+0x44>
 4fe:	5a c0       	rjmp	.+180    	; 0x5b4 <main+0xf8>
			size = UART_recieveByte();
 500:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 504:	80 93 c7 00 	sts	0x00C7, r24
			UART_recieveArray(recievedPass,size);
 508:	20 91 c7 00 	lds	r18, 0x00C7
 50c:	83 e6       	ldi	r24, 0x63	; 99
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	62 2f       	mov	r22, r18
 512:	0e 94 99 03 	call	0x732	; 0x732 <UART_recieveArray>
			EEPROM_readArray(0x0311,savedPass,size);
 516:	40 91 c7 00 	lds	r20, 0x00C7
 51a:	28 ec       	ldi	r18, 0xC8	; 200
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	81 e1       	ldi	r24, 0x11	; 17
 520:	93 e0       	ldi	r25, 0x03	; 3
 522:	b9 01       	movw	r22, r18
 524:	0e 94 4d 01 	call	0x29a	; 0x29a <EEPROM_readArray>
 528:	16 c0       	rjmp	.+44     	; 0x556 <main+0x9a>
			while(i<size){
				if(recievedPass[i]!=savedPass[i]){
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	fc 01       	movw	r30, r24
 532:	ed 59       	subi	r30, 0x9D	; 157
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	20 81       	ld	r18, Z
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fc 01       	movw	r30, r24
 540:	e8 53       	subi	r30, 0x38	; 56
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	80 81       	ld	r24, Z
 546:	28 17       	cp	r18, r24
 548:	19 f0       	breq	.+6      	; 0x550 <main+0x94>
					PassmatchFlag=0;
 54a:	10 92 60 00 	sts	0x0060, r1
 54e:	08 c0       	rjmp	.+16     	; 0x560 <main+0xa4>
					break;
				}
				i++;
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	8a 83       	std	Y+2, r24	; 0x02
		state = UART_recieveByte();
		if(state =='*'){
			size = UART_recieveByte();
			UART_recieveArray(recievedPass,size);
			EEPROM_readArray(0x0311,savedPass,size);
			while(i<size){
 556:	90 91 c7 00 	lds	r25, 0x00C7
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	89 17       	cp	r24, r25
 55e:	28 f3       	brcs	.-54     	; 0x52a <main+0x6e>
					PassmatchFlag=0;
					break;
				}
				i++;
			}
			UART_sendByte(PassmatchFlag);
 560:	80 91 60 00 	lds	r24, 0x0060
 564:	0e 94 48 03 	call	0x690	; 0x690 <UART_sendByte>
			if(UART_recieveByte()==PASSWORD_CHANGED){
 568:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 56c:	85 30       	cpi	r24, 0x05	; 5
 56e:	09 f0       	breq	.+2      	; 0x572 <main+0xb6>
 570:	be cf       	rjmp	.-132    	; 0x4ee <main+0x32>
				size =UART_recieveByte();
 572:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 576:	80 93 c7 00 	sts	0x00C7, r24
				UART_recieveArray(savedPass,size);
 57a:	20 91 c7 00 	lds	r18, 0x00C7
 57e:	88 ec       	ldi	r24, 0xC8	; 200
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	62 2f       	mov	r22, r18
 584:	0e 94 99 03 	call	0x732	; 0x732 <UART_recieveArray>
				EEPROM_writeArray(0x0311,savedPass,size);
 588:	40 91 c7 00 	lds	r20, 0x00C7
 58c:	28 ec       	ldi	r18, 0xC8	; 200
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e1       	ldi	r24, 0x11	; 17
 592:	93 e0       	ldi	r25, 0x03	; 3
 594:	b9 01       	movw	r22, r18
 596:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <EEPROM_writeArray>
				UART_sendByte(1);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 48 03 	call	0x690	; 0x690 <UART_sendByte>
				wdt_enable(1);
 5a0:	88 e1       	ldi	r24, 0x18	; 24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	29 e0       	ldi	r18, 0x09	; 9
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	a8 95       	wdr
 5ac:	81 bd       	out	0x21, r24	; 33
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	21 bd       	out	0x21, r18	; 33
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <main+0xf6>
				while(1) {}
			}
		}
		else if(state =='#'){
 5b4:	80 91 62 00 	lds	r24, 0x0062
 5b8:	83 32       	cpi	r24, 0x23	; 35
 5ba:	09 f0       	breq	.+2      	; 0x5be <main+0x102>
 5bc:	98 cf       	rjmp	.-208    	; 0x4ee <main+0x32>
			size = UART_recieveByte();
 5be:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 5c2:	80 93 c7 00 	sts	0x00C7, r24
			UART_recieveArray(recievedPass,size);
 5c6:	20 91 c7 00 	lds	r18, 0x00C7
 5ca:	83 e6       	ldi	r24, 0x63	; 99
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	62 2f       	mov	r22, r18
 5d0:	0e 94 99 03 	call	0x732	; 0x732 <UART_recieveArray>
			EEPROM_readArray(0x0311,savedPass,size);
 5d4:	40 91 c7 00 	lds	r20, 0x00C7
 5d8:	28 ec       	ldi	r18, 0xC8	; 200
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	81 e1       	ldi	r24, 0x11	; 17
 5de:	93 e0       	ldi	r25, 0x03	; 3
 5e0:	b9 01       	movw	r22, r18
 5e2:	0e 94 4d 01 	call	0x29a	; 0x29a <EEPROM_readArray>
 5e6:	16 c0       	rjmp	.+44     	; 0x614 <main+0x158>
			while(j<size){
				if(recievedPass[j]!=savedPass[j]){
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	fc 01       	movw	r30, r24
 5f0:	ed 59       	subi	r30, 0x9D	; 157
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	20 81       	ld	r18, Z
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	fc 01       	movw	r30, r24
 5fe:	e8 53       	subi	r30, 0x38	; 56
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	80 81       	ld	r24, Z
 604:	28 17       	cp	r18, r24
 606:	19 f0       	breq	.+6      	; 0x60e <main+0x152>
					PassmatchFlag=0;
 608:	10 92 60 00 	sts	0x0060, r1
 60c:	08 c0       	rjmp	.+16     	; 0x61e <main+0x162>
					break;
				}
				j++;
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(state =='#'){
			size = UART_recieveByte();
			UART_recieveArray(recievedPass,size);
			EEPROM_readArray(0x0311,savedPass,size);
			while(j<size){
 614:	90 91 c7 00 	lds	r25, 0x00C7
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	89 17       	cp	r24, r25
 61c:	28 f3       	brcs	.-54     	; 0x5e8 <main+0x12c>
					PassmatchFlag=0;
					break;
				}
				j++;
			}
			UART_sendByte(PassmatchFlag);
 61e:	80 91 60 00 	lds	r24, 0x0060
 622:	0e 94 48 03 	call	0x690	; 0x690 <UART_sendByte>
			if(UART_recieveByte()==OPEN_DOOR){
 626:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	09 f0       	breq	.+2      	; 0x630 <main+0x174>
 62e:	5f cf       	rjmp	.-322    	; 0x4ee <main+0x32>
				PORTB &=~(1<<PB7);
 630:	a8 e3       	ldi	r26, 0x38	; 56
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	e8 e3       	ldi	r30, 0x38	; 56
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	8f 77       	andi	r24, 0x7F	; 127
 63c:	8c 93       	st	X, r24
				PORTB |=(1<<PB6);
 63e:	a8 e3       	ldi	r26, 0x38	; 56
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e8 e3       	ldi	r30, 0x38	; 56
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	80 64       	ori	r24, 0x40	; 64
 64a:	8c 93       	st	X, r24
 64c:	50 cf       	rjmp	.-352    	; 0x4ee <main+0x32>

0000064e <TIMER1_init>:
 *  Created on: May 7, 2019
 *      Author: karee
 */
#include "timer1.h"

void TIMER1_init(){
 64e:	df 93       	push	r29
 650:	cf 93       	push	r28
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62

}
 656:	cf 91       	pop	r28
 658:	df 91       	pop	r29
 65a:	08 95       	ret

0000065c <UART_init>:
 */


#include"uart.h"

void UART_init(void){
 65c:	df 93       	push	r29
 65e:	cf 93       	push	r28
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	UCSRA |=(1<<U2X);
 664:	ab e2       	ldi	r26, 0x2B	; 43
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	eb e2       	ldi	r30, 0x2B	; 43
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	8c 93       	st	X, r24
	UCSRB =(1<<RXEN)|(1<<TXEN);
 672:	ea e2       	ldi	r30, 0x2A	; 42
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	88 e1       	ldi	r24, 0x18	; 24
 678:	80 83       	st	Z, r24
	UCSRC =(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 67a:	e0 e4       	ldi	r30, 0x40	; 64
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	86 e8       	ldi	r24, 0x86	; 134
 680:	80 83       	st	Z, r24
	UBRRL = 103;
 682:	e9 e2       	ldi	r30, 0x29	; 41
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	87 e6       	ldi	r24, 0x67	; 103
 688:	80 83       	st	Z, r24
}
 68a:	cf 91       	pop	r28
 68c:	df 91       	pop	r29
 68e:	08 95       	ret

00000690 <UART_sendByte>:

void UART_sendByte(uint8 data){
 690:	df 93       	push	r29
 692:	cf 93       	push	r28
 694:	0f 92       	push	r0
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
 69c:	ec e2       	ldi	r30, 0x2C	; 44
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){}
 6a4:	eb e2       	ldi	r30, 0x2B	; 43
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	80 74       	andi	r24, 0x40	; 64
 6b0:	90 70       	andi	r25, 0x00	; 0
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	b9 f3       	breq	.-18     	; 0x6a4 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
 6b6:	ab e2       	ldi	r26, 0x2B	; 43
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	eb e2       	ldi	r30, 0x2B	; 43
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	80 64       	ori	r24, 0x40	; 64
 6c2:	8c 93       	st	X, r24

}
 6c4:	0f 90       	pop	r0
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <UART_recieveByte>:

uint8 UART_recieveByte(void){
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 6d4:	eb e2       	ldi	r30, 0x2B	; 43
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	88 23       	and	r24, r24
 6dc:	dc f7       	brge	.-10     	; 0x6d4 <UART_recieveByte+0x8>
	return UDR;
 6de:	ec e2       	ldi	r30, 0x2C	; 44
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
}
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <UART_sendArray>:



void UART_sendArray(uint8 *data,uint8 size){
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <UART_sendArray+0x6>
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <UART_sendArray+0x8>
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	9b 83       	std	Y+3, r25	; 0x03
 6f8:	8a 83       	std	Y+2, r24	; 0x02
 6fa:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
 6fc:	19 82       	std	Y+1, r1	; 0x01
 6fe:	0e c0       	rjmp	.+28     	; 0x71c <UART_sendArray+0x32>
	while (i<size){
		UART_sendByte(data[i]);
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	9b 81       	ldd	r25, Y+3	; 0x03
 70a:	fc 01       	movw	r30, r24
 70c:	e2 0f       	add	r30, r18
 70e:	f3 1f       	adc	r31, r19
 710:	80 81       	ld	r24, Z
 712:	0e 94 48 03 	call	0x690	; 0x690 <UART_sendByte>
		i++;
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	89 83       	std	Y+1, r24	; 0x01



void UART_sendArray(uint8 *data,uint8 size){
	uint8 i=0;
	while (i<size){
 71c:	99 81       	ldd	r25, Y+1	; 0x01
 71e:	8c 81       	ldd	r24, Y+4	; 0x04
 720:	98 17       	cp	r25, r24
 722:	70 f3       	brcs	.-36     	; 0x700 <UART_sendArray+0x16>
		UART_sendByte(data[i]);
		i++;
	}
}
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <UART_recieveArray>:
 void UART_recieveArray(uint8 *data, uint8 size){
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	df 93       	push	r29
 738:	cf 93       	push	r28
 73a:	00 d0       	rcall	.+0      	; 0x73c <UART_recieveArray+0xa>
 73c:	00 d0       	rcall	.+0      	; 0x73e <UART_recieveArray+0xc>
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	9b 83       	std	Y+3, r25	; 0x03
 744:	8a 83       	std	Y+2, r24	; 0x02
 746:	6c 83       	std	Y+4, r22	; 0x04
	 uint8 i =0;
 748:	19 82       	std	Y+1, r1	; 0x01
 74a:	0f c0       	rjmp	.+30     	; 0x76a <UART_recieveArray+0x38>
	 while(i<size){
		 data[i] = UART_recieveByte();
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	9b 81       	ldd	r25, Y+3	; 0x03
 756:	8c 01       	movw	r16, r24
 758:	02 0f       	add	r16, r18
 75a:	13 1f       	adc	r17, r19
 75c:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_recieveByte>
 760:	f8 01       	movw	r30, r16
 762:	80 83       	st	Z, r24
		 i++;
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}
}
 void UART_recieveArray(uint8 *data, uint8 size){
	 uint8 i =0;
	 while(i<size){
 76a:	99 81       	ldd	r25, Y+1	; 0x01
 76c:	8c 81       	ldd	r24, Y+4	; 0x04
 76e:	98 17       	cp	r25, r24
 770:	68 f3       	brcs	.-38     	; 0x74c <UART_recieveArray+0x1a>
		 data[i] = UART_recieveByte();
		 i++;
	 }
}
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	cf 91       	pop	r28
 77c:	df 91       	pop	r29
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
