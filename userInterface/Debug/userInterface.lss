
userInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00003036  000030ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800132  00800132  0000319c  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  00005b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000694f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009733  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b09b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <main>
      8a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
#endif
/*****************************************************************/


/*	uint8 KEYPAD_getPressedKey(void)  is used to return the pressed key on the keypad*/
uint8 KEYPAD_getPressedKey(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KEYPAD_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	while(1){
		uint8 col,row;
		for(col=0;col<NUM_COL;col++){
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4d c0       	rjmp	.+154    	; 0xbee <KEYPAD_getPressedKey+0xa8>
			/*we cleared first 4 pins to be input and set last 4 bits to be output*/
			KEYPAD_DATA_DIR.data =0b00010000 <<(col);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KEYPAD_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KEYPAD_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			/*enable the internal pull up resistors to the input pins
			 * and loop for the 4 output pins to set high value in each pin*/
			KEYPAD_DATA_OUT.data =~(0b00010000 <<(col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KEYPAD_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KEYPAD_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
			/*loop in rows to check which key is pressed*/
			for(row=0;row<NUM_ROW;row++){
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	29 c0       	rjmp	.+82     	; 0xbe2 <KEYPAD_getPressedKey+0x9c>
				if(BIT_IS_CLEAR(KEYPAD_DATA_IN.data,row)){
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KEYPAD_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KEYPAD_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	99 f4       	brne	.+38     	; 0xbdc <KEYPAD_getPressedKey+0x96>
#if(NUM_COL ==4)
					return KEYPAD_4x4_keyNumber((row*NUM_COL)+col+1);
#elif(NUM_COL ==3)
					return KEYPAD_4x3_keyNumber((row*NUM_COL)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	98 2f       	mov	r25, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	89 0f       	add	r24, r25
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <KEYPAD_4x3_keyNumber>
				}
			}

		}
	}
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret
			KEYPAD_DATA_DIR.data =0b00010000 <<(col);
			/*enable the internal pull up resistors to the input pins
			 * and loop for the 4 output pins to set high value in each pin*/
			KEYPAD_DATA_OUT.data =~(0b00010000 <<(col));
			/*loop in rows to check which key is pressed*/
			for(row=0;row<NUM_ROW;row++){
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	a0 f2       	brcs	.-88     	; 0xb90 <KEYPAD_getPressedKey+0x4a>

/*	uint8 KEYPAD_getPressedKey(void)  is used to return the pressed key on the keypad*/
uint8 KEYPAD_getPressedKey(void){
	while(1){
		uint8 col,row;
		for(col=0;col<NUM_COL;col++){
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <KEYPAD_getPressedKey+0xb0>
     bf4:	af cf       	rjmp	.-162    	; 0xb54 <KEYPAD_getPressedKey+0xe>
     bf6:	ac cf       	rjmp	.-168    	; 0xb50 <KEYPAD_getPressedKey+0xa>

00000bf8 <KEYPAD_4x3_keyNumber>:
	default: return 0;
	break;
	}
}
#elif(NUM_COL ==3)
static uint8 KEYPAD_4x3_keyNumber(uint8 a_buttonNumber){
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KEYPAD_4x3_keyNumber+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <KEYPAD_4x3_keyNumber+0x8>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	89 83       	std	Y+1, r24	; 0x01
	switch(a_buttonNumber){
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	3c 83       	std	Y+4, r19	; 0x04
     c0e:	2b 83       	std	Y+3, r18	; 0x03
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	91 05       	cpc	r25, r1
     c18:	81 f0       	breq	.+32     	; 0xc3a <KEYPAD_4x3_keyNumber+0x42>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	2a 30       	cpi	r18, 0x0A	; 10
     c20:	31 05       	cpc	r19, r1
     c22:	9c f0       	brlt	.+38     	; 0xc4a <KEYPAD_4x3_keyNumber+0x52>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	8b 30       	cpi	r24, 0x0B	; 11
     c2a:	91 05       	cpc	r25, r1
     c2c:	49 f0       	breq	.+18     	; 0xc40 <KEYPAD_4x3_keyNumber+0x48>
     c2e:	2b 81       	ldd	r18, Y+3	; 0x03
     c30:	3c 81       	ldd	r19, Y+4	; 0x04
     c32:	2c 30       	cpi	r18, 0x0C	; 12
     c34:	31 05       	cpc	r19, r1
     c36:	31 f0       	breq	.+12     	; 0xc44 <KEYPAD_4x3_keyNumber+0x4c>
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <KEYPAD_4x3_keyNumber+0x52>
	case 10: return '*';
     c3a:	3a e2       	ldi	r19, 0x2A	; 42
     c3c:	3a 83       	std	Y+2, r19	; 0x02
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <KEYPAD_4x3_keyNumber+0x56>
	break;
	case 11: return 0;
     c40:	1a 82       	std	Y+2, r1	; 0x02
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <KEYPAD_4x3_keyNumber+0x56>
	break;
	case 12: return '#';
     c44:	83 e2       	ldi	r24, 0x23	; 35
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <KEYPAD_4x3_keyNumber+0x56>
	break;
	default : return a_buttonNumber ;
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <LCD_init>:
 */

#include "lcd.h"


void LCD_init(void){
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_REG_DIR.data |=(1<<PIN_RS)|(1<<PIN_RW)|(1<<PIN_E);
     c66:	a4 e3       	ldi	r26, 0x34	; 52
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e4 e3       	ldi	r30, 0x34	; 52
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	87 60       	ori	r24, 0x07	; 7
     c72:	8c 93       	st	X, r24
#if(DATA_BIT_MODE ==8)
	LCD_DATA_REG_DIR.data=0xff;
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#elif(DATA_BIT_MODE ==4)
	LCD_DATA_REG_DIR.data|= 0xf0;
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 6f       	ori	r24, 0xF0	; 240
     c80:	8c 93       	st	X, r24
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
     c8e:	8c e0       	ldi	r24, 0x0C	; 12
     c90:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 a_command){
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	c3 56       	subi	r28, 0x63	; 99
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	fe 01       	movw	r30, r28
     cbc:	ed 59       	subi	r30, 0x9D	; 157
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
	LCD_CTRL_REG_PORT.BITS.RS=LOW;
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 83       	st	Z, r24
	LCD_CTRL_REG_PORT.BITS.RW=LOW;
     ccc:	e5 e3       	ldi	r30, 0x35	; 53
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	80 83       	st	Z, r24
     cd6:	fe 01       	movw	r30, r28
     cd8:	e1 5a       	subi	r30, 0xA1	; 161
     cda:	ff 4f       	sbci	r31, 0xFF	; 255
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e8       	ldi	r26, 0x80	; 128
     ce2:	bf e3       	ldi	r27, 0x3F	; 63
     ce4:	80 83       	st	Z, r24
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	a2 83       	std	Z+2, r26	; 0x02
     cea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cec:	8e 01       	movw	r16, r28
     cee:	05 5a       	subi	r16, 0xA5	; 165
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	e1 5a       	subi	r30, 0xA1	; 161
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	4a e7       	ldi	r20, 0x7A	; 122
     d06:	53 e4       	ldi	r21, 0x43	; 67
     d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	f8 01       	movw	r30, r16
     d12:	80 83       	st	Z, r24
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	a2 83       	std	Z+2, r26	; 0x02
     d18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d1a:	fe 01       	movw	r30, r28
     d1c:	e5 5a       	subi	r30, 0xA5	; 165
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d34:	88 23       	and	r24, r24
     d36:	44 f4       	brge	.+16     	; 0xd48 <LCD_sendCommand+0xa8>
		__ticks = 1;
     d38:	fe 01       	movw	r30, r28
     d3a:	e7 5a       	subi	r30, 0xA7	; 167
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
     d46:	64 c0       	rjmp	.+200    	; 0xe10 <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
     d48:	fe 01       	movw	r30, r28
     d4a:	e5 5a       	subi	r30, 0xA5	; 165
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	3f ef       	ldi	r19, 0xFF	; 255
     d5a:	4f e7       	ldi	r20, 0x7F	; 127
     d5c:	57 e4       	ldi	r21, 0x47	; 71
     d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d62:	18 16       	cp	r1, r24
     d64:	0c f0       	brlt	.+2      	; 0xd68 <LCD_sendCommand+0xc8>
     d66:	43 c0       	rjmp	.+134    	; 0xdee <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d68:	fe 01       	movw	r30, r28
     d6a:	e1 5a       	subi	r30, 0xA1	; 161
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e2       	ldi	r20, 0x20	; 32
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	8e 01       	movw	r16, r28
     d88:	07 5a       	subi	r16, 0xA7	; 167
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	f8 01       	movw	r30, r16
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
     d9e:	1f c0       	rjmp	.+62     	; 0xdde <LCD_sendCommand+0x13e>
     da0:	fe 01       	movw	r30, r28
     da2:	e9 5a       	subi	r30, 0xA9	; 169
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	89 e1       	ldi	r24, 0x19	; 25
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dae:	fe 01       	movw	r30, r28
     db0:	e9 5a       	subi	r30, 0xA9	; 169
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <LCD_sendCommand+0x118>
     dbc:	fe 01       	movw	r30, r28
     dbe:	e9 5a       	subi	r30, 0xA9	; 169
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc6:	de 01       	movw	r26, r28
     dc8:	a7 5a       	subi	r26, 0xA7	; 167
     dca:	bf 4f       	sbci	r27, 0xFF	; 255
     dcc:	fe 01       	movw	r30, r28
     dce:	e7 5a       	subi	r30, 0xA7	; 167
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dde:	fe 01       	movw	r30, r28
     de0:	e7 5a       	subi	r30, 0xA7	; 167
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	d1 f6       	brne	.-76     	; 0xda0 <LCD_sendCommand+0x100>
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dee:	8e 01       	movw	r16, r28
     df0:	07 5a       	subi	r16, 0xA7	; 167
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
     df4:	fe 01       	movw	r30, r28
     df6:	e5 5a       	subi	r30, 0xA5	; 165
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	f8 01       	movw	r30, r16
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
     e10:	de 01       	movw	r26, r28
     e12:	ab 5a       	subi	r26, 0xAB	; 171
     e14:	bf 4f       	sbci	r27, 0xFF	; 255
     e16:	fe 01       	movw	r30, r28
     e18:	e7 5a       	subi	r30, 0xA7	; 167
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	8d 93       	st	X+, r24
     e22:	9c 93       	st	X, r25
     e24:	fe 01       	movw	r30, r28
     e26:	eb 5a       	subi	r30, 0xAB	; 171
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCD_sendCommand+0x18e>
     e32:	fe 01       	movw	r30, r28
     e34:	eb 5a       	subi	r30, 0xAB	; 171
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=HIGH; //or we use command  SET_BIT(LCD_CTRL_REG_PORT.data,PIN_E);
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	80 83       	st	Z, r24
     e46:	fe 01       	movw	r30, r28
     e48:	ef 5a       	subi	r30, 0xAF	; 175
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 e8       	ldi	r26, 0x80	; 128
     e52:	bf e3       	ldi	r27, 0x3F	; 63
     e54:	80 83       	st	Z, r24
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	a2 83       	std	Z+2, r26	; 0x02
     e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	8e 01       	movw	r16, r28
     e5e:	03 5b       	subi	r16, 0xB3	; 179
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	fe 01       	movw	r30, r28
     e64:	ef 5a       	subi	r30, 0xAF	; 175
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a e7       	ldi	r20, 0x7A	; 122
     e76:	53 e4       	ldi	r21, 0x43	; 67
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	80 83       	st	Z, r24
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	a2 83       	std	Z+2, r26	; 0x02
     e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8a:	fe 01       	movw	r30, r28
     e8c:	e3 5b       	subi	r30, 0xB3	; 179
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	44 f4       	brge	.+16     	; 0xeb8 <LCD_sendCommand+0x218>
		__ticks = 1;
     ea8:	fe 01       	movw	r30, r28
     eaa:	e5 5b       	subi	r30, 0xB5	; 181
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	64 c0       	rjmp	.+200    	; 0xf80 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     eb8:	fe 01       	movw	r30, r28
     eba:	e3 5b       	subi	r30, 0xB3	; 179
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	0c f0       	brlt	.+2      	; 0xed8 <LCD_sendCommand+0x238>
     ed6:	43 c0       	rjmp	.+134    	; 0xf5e <LCD_sendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed8:	fe 01       	movw	r30, r28
     eda:	ef 5a       	subi	r30, 0xAF	; 175
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8e 01       	movw	r16, r28
     ef8:	05 5b       	subi	r16, 0xB5	; 181
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	f8 01       	movw	r30, r16
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
     f0e:	1f c0       	rjmp	.+62     	; 0xf4e <LCD_sendCommand+0x2ae>
     f10:	fe 01       	movw	r30, r28
     f12:	e7 5b       	subi	r30, 0xB7	; 183
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	89 e1       	ldi	r24, 0x19	; 25
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
     f1e:	fe 01       	movw	r30, r28
     f20:	e7 5b       	subi	r30, 0xB7	; 183
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <LCD_sendCommand+0x288>
     f2c:	fe 01       	movw	r30, r28
     f2e:	e7 5b       	subi	r30, 0xB7	; 183
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f36:	de 01       	movw	r26, r28
     f38:	a5 5b       	subi	r26, 0xB5	; 181
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	e5 5b       	subi	r30, 0xB5	; 181
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	11 96       	adiw	r26, 0x01	; 1
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	fe 01       	movw	r30, r28
     f50:	e5 5b       	subi	r30, 0xB5	; 181
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	d1 f6       	brne	.-76     	; 0xf10 <LCD_sendCommand+0x270>
     f5c:	27 c0       	rjmp	.+78     	; 0xfac <LCD_sendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5e:	8e 01       	movw	r16, r28
     f60:	05 5b       	subi	r16, 0xB5	; 181
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	fe 01       	movw	r30, r28
     f66:	e3 5b       	subi	r30, 0xB3	; 179
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	f8 01       	movw	r30, r16
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
     f80:	de 01       	movw	r26, r28
     f82:	a9 5b       	subi	r26, 0xB9	; 185
     f84:	bf 4f       	sbci	r27, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	e5 5b       	subi	r30, 0xB5	; 181
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	8d 93       	st	X+, r24
     f92:	9c 93       	st	X, r25
     f94:	fe 01       	movw	r30, r28
     f96:	e9 5b       	subi	r30, 0xB9	; 185
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <LCD_sendCommand+0x2fe>
     fa2:	fe 01       	movw	r30, r28
     fa4:	e9 5b       	subi	r30, 0xB9	; 185
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
	_delay_ms(1);
#elif(DATA_BIT_MODE ==4)
	_delay_ms(1);
	LCD_DATA_REG_PORT.data=(LCD_DATA_REG_PORT.data & 0X0F)|(a_command & 0XF0) ;
     fac:	a5 e3       	ldi	r26, 0x35	; 53
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e3       	ldi	r30, 0x35	; 53
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	98 2f       	mov	r25, r24
     fb8:	9f 70       	andi	r25, 0x0F	; 15
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 59       	subi	r30, 0x9D	; 157
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	80 7f       	andi	r24, 0xF0	; 240
     fc4:	89 2b       	or	r24, r25
     fc6:	8c 93       	st	X, r24
     fc8:	fe 01       	movw	r30, r28
     fca:	ed 5b       	subi	r30, 0xBD	; 189
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e8       	ldi	r26, 0x80	; 128
     fd4:	bf e3       	ldi	r27, 0x3F	; 63
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	8e 01       	movw	r16, r28
     fe0:	01 5c       	subi	r16, 0xC1	; 193
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	ed 5b       	subi	r30, 0xBD	; 189
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	f8 01       	movw	r30, r16
    1004:	80 83       	st	Z, r24
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	a2 83       	std	Z+2, r26	; 0x02
    100a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100c:	fe 01       	movw	r30, r28
    100e:	ff 96       	adiw	r30, 0x3f	; 63
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <LCD_sendCommand+0x392>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9e af       	std	Y+62, r25	; 0x3e
    102e:	8d af       	std	Y+61, r24	; 0x3d
    1030:	46 c0       	rjmp	.+140    	; 0x10be <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    1032:	fe 01       	movw	r30, r28
    1034:	ff 96       	adiw	r30, 0x3f	; 63
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	64 f5       	brge	.+88     	; 0x10a6 <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104e:	fe 01       	movw	r30, r28
    1050:	ed 5b       	subi	r30, 0xBD	; 189
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9e af       	std	Y+62, r25	; 0x3e
    107a:	8d af       	std	Y+61, r24	; 0x3d
    107c:	0f c0       	rjmp	.+30     	; 0x109c <LCD_sendCommand+0x3fc>
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9c af       	std	Y+60, r25	; 0x3c
    1084:	8b af       	std	Y+59, r24	; 0x3b
    1086:	8b ad       	ldd	r24, Y+59	; 0x3b
    1088:	9c ad       	ldd	r25, Y+60	; 0x3c
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <LCD_sendCommand+0x3ea>
    108e:	9c af       	std	Y+60, r25	; 0x3c
    1090:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8d ad       	ldd	r24, Y+61	; 0x3d
    1094:	9e ad       	ldd	r25, Y+62	; 0x3e
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9e af       	std	Y+62, r25	; 0x3e
    109a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8d ad       	ldd	r24, Y+61	; 0x3d
    109e:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <LCD_sendCommand+0x3de>
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	fe 01       	movw	r30, r28
    10a8:	ff 96       	adiw	r30, 0x3f	; 63
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9e af       	std	Y+62, r25	; 0x3e
    10bc:	8d af       	std	Y+61, r24	; 0x3d
    10be:	8d ad       	ldd	r24, Y+61	; 0x3d
    10c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10c2:	9a af       	std	Y+58, r25	; 0x3a
    10c4:	89 af       	std	Y+57, r24	; 0x39
    10c6:	89 ad       	ldd	r24, Y+57	; 0x39
    10c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <LCD_sendCommand+0x42a>
    10ce:	9a af       	std	Y+58, r25	; 0x3a
    10d0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8b 7f       	andi	r24, 0xFB	; 251
    10da:	80 83       	st	Z, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e8       	ldi	r26, 0x80	; 128
    10e2:	bf e3       	ldi	r27, 0x3F	; 63
    10e4:	8d ab       	std	Y+53, r24	; 0x35
    10e6:	9e ab       	std	Y+54, r25	; 0x36
    10e8:	af ab       	std	Y+55, r26	; 0x37
    10ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6d a9       	ldd	r22, Y+53	; 0x35
    10ee:	7e a9       	ldd	r23, Y+54	; 0x36
    10f0:	8f a9       	ldd	r24, Y+55	; 0x37
    10f2:	98 ad       	ldd	r25, Y+56	; 0x38
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	53 e4       	ldi	r21, 0x43	; 67
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	89 ab       	std	Y+49, r24	; 0x31
    1106:	9a ab       	std	Y+50, r25	; 0x32
    1108:	ab ab       	std	Y+51, r26	; 0x33
    110a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    110c:	69 a9       	ldd	r22, Y+49	; 0x31
    110e:	7a a9       	ldd	r23, Y+50	; 0x32
    1110:	8b a9       	ldd	r24, Y+51	; 0x33
    1112:	9c a9       	ldd	r25, Y+52	; 0x34
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <LCD_sendCommand+0x48e>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 ab       	std	Y+48, r25	; 0x30
    112a:	8f a7       	std	Y+47, r24	; 0x2f
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <LCD_sendCommand+0x50c>
	else if (__tmp > 65535)
    112e:	69 a9       	ldd	r22, Y+49	; 0x31
    1130:	7a a9       	ldd	r23, Y+50	; 0x32
    1132:	8b a9       	ldd	r24, Y+51	; 0x33
    1134:	9c a9       	ldd	r25, Y+52	; 0x34
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <LCD_sendCommand+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6d a9       	ldd	r22, Y+53	; 0x35
    1148:	7e a9       	ldd	r23, Y+54	; 0x36
    114a:	8f a9       	ldd	r24, Y+55	; 0x37
    114c:	98 ad       	ldd	r25, Y+56	; 0x38
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	98 ab       	std	Y+48, r25	; 0x30
    116c:	8f a7       	std	Y+47, r24	; 0x2f
    116e:	0f c0       	rjmp	.+30     	; 0x118e <LCD_sendCommand+0x4ee>
    1170:	89 e1       	ldi	r24, 0x19	; 25
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9e a7       	std	Y+46, r25	; 0x2e
    1176:	8d a7       	std	Y+45, r24	; 0x2d
    1178:	8d a5       	ldd	r24, Y+45	; 0x2d
    117a:	9e a5       	ldd	r25, Y+46	; 0x2e
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCD_sendCommand+0x4dc>
    1180:	9e a7       	std	Y+46, r25	; 0x2e
    1182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8f a5       	ldd	r24, Y+47	; 0x2f
    1186:	98 a9       	ldd	r25, Y+48	; 0x30
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	98 ab       	std	Y+48, r25	; 0x30
    118c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1190:	98 a9       	ldd	r25, Y+48	; 0x30
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <LCD_sendCommand+0x4d0>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <LCD_sendCommand+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	69 a9       	ldd	r22, Y+49	; 0x31
    119a:	7a a9       	ldd	r23, Y+50	; 0x32
    119c:	8b a9       	ldd	r24, Y+51	; 0x33
    119e:	9c a9       	ldd	r25, Y+52	; 0x34
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	9c a7       	std	Y+44, r25	; 0x2c
    11b2:	8b a7       	std	Y+43, r24	; 0x2b
    11b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <LCD_sendCommand+0x518>
    11bc:	9c a7       	std	Y+44, r25	; 0x2c
    11be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=HIGH; //or we use command  SET_BIT(LCD_CTRL_REG_PORT.data,PIN_E);
    11c0:	e5 e3       	ldi	r30, 0x35	; 53
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	84 60       	ori	r24, 0x04	; 4
    11c8:	80 83       	st	Z, r24
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e8       	ldi	r26, 0x80	; 128
    11d0:	bf e3       	ldi	r27, 0x3F	; 63
    11d2:	8f a3       	std	Y+39, r24	; 0x27
    11d4:	98 a7       	std	Y+40, r25	; 0x28
    11d6:	a9 a7       	std	Y+41, r26	; 0x29
    11d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11da:	6f a1       	ldd	r22, Y+39	; 0x27
    11dc:	78 a5       	ldd	r23, Y+40	; 0x28
    11de:	89 a5       	ldd	r24, Y+41	; 0x29
    11e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4a e7       	ldi	r20, 0x7A	; 122
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	8b a3       	std	Y+35, r24	; 0x23
    11f4:	9c a3       	std	Y+36, r25	; 0x24
    11f6:	ad a3       	std	Y+37, r26	; 0x25
    11f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11fa:	6b a1       	ldd	r22, Y+35	; 0x23
    11fc:	7c a1       	ldd	r23, Y+36	; 0x24
    11fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1200:	9e a1       	ldd	r25, Y+38	; 0x26
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	2c f4       	brge	.+10     	; 0x121c <LCD_sendCommand+0x57c>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	3f c0       	rjmp	.+126    	; 0x129a <LCD_sendCommand+0x5fa>
	else if (__tmp > 65535)
    121c:	6b a1       	ldd	r22, Y+35	; 0x23
    121e:	7c a1       	ldd	r23, Y+36	; 0x24
    1220:	8d a1       	ldd	r24, Y+37	; 0x25
    1222:	9e a1       	ldd	r25, Y+38	; 0x26
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	57 e4       	ldi	r21, 0x47	; 71
    122c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1230:	18 16       	cp	r1, r24
    1232:	4c f5       	brge	.+82     	; 0x1286 <LCD_sendCommand+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1234:	6f a1       	ldd	r22, Y+39	; 0x27
    1236:	78 a5       	ldd	r23, Y+40	; 0x28
    1238:	89 a5       	ldd	r24, Y+41	; 0x29
    123a:	9a a5       	ldd	r25, Y+42	; 0x2a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9a a3       	std	Y+34, r25	; 0x22
    125a:	89 a3       	std	Y+33, r24	; 0x21
    125c:	0f c0       	rjmp	.+30     	; 0x127c <LCD_sendCommand+0x5dc>
    125e:	89 e1       	ldi	r24, 0x19	; 25
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	98 a3       	std	Y+32, r25	; 0x20
    1264:	8f 8f       	std	Y+31, r24	; 0x1f
    1266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1268:	98 a1       	ldd	r25, Y+32	; 0x20
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <LCD_sendCommand+0x5ca>
    126e:	98 a3       	std	Y+32, r25	; 0x20
    1270:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	89 a1       	ldd	r24, Y+33	; 0x21
    1274:	9a a1       	ldd	r25, Y+34	; 0x22
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	9a a3       	std	Y+34, r25	; 0x22
    127a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127c:	89 a1       	ldd	r24, Y+33	; 0x21
    127e:	9a a1       	ldd	r25, Y+34	; 0x22
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	69 f7       	brne	.-38     	; 0x125e <LCD_sendCommand+0x5be>
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <LCD_sendCommand+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1286:	6b a1       	ldd	r22, Y+35	; 0x23
    1288:	7c a1       	ldd	r23, Y+36	; 0x24
    128a:	8d a1       	ldd	r24, Y+37	; 0x25
    128c:	9e a1       	ldd	r25, Y+38	; 0x26
    128e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	9a a3       	std	Y+34, r25	; 0x22
    1298:	89 a3       	std	Y+33, r24	; 0x21
    129a:	89 a1       	ldd	r24, Y+33	; 0x21
    129c:	9a a1       	ldd	r25, Y+34	; 0x22
    129e:	9e 8f       	std	Y+30, r25	; 0x1e
    12a0:	8d 8f       	std	Y+29, r24	; 0x1d
    12a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <LCD_sendCommand+0x606>
    12aa:	9e 8f       	std	Y+30, r25	; 0x1e
    12ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_REG_PORT.data=(LCD_DATA_REG_PORT.data & 0X0F)|((a_command& 0X0f)<<4) ;
    12ae:	a5 e3       	ldi	r26, 0x35	; 53
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	2f 70       	andi	r18, 0x0F	; 15
    12bc:	fe 01       	movw	r30, r28
    12be:	ed 59       	subi	r30, 0x9D	; 157
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	80 81       	ld	r24, Z
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	82 95       	swap	r24
    12ca:	92 95       	swap	r25
    12cc:	90 7f       	andi	r25, 0xF0	; 240
    12ce:	98 27       	eor	r25, r24
    12d0:	80 7f       	andi	r24, 0xF0	; 240
    12d2:	98 27       	eor	r25, r24
    12d4:	82 2b       	or	r24, r18
    12d6:	8c 93       	st	X, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e8       	ldi	r26, 0x80	; 128
    12de:	bf e3       	ldi	r27, 0x3F	; 63
    12e0:	89 8f       	std	Y+25, r24	; 0x19
    12e2:	9a 8f       	std	Y+26, r25	; 0x1a
    12e4:	ab 8f       	std	Y+27, r26	; 0x1b
    12e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	69 8d       	ldd	r22, Y+25	; 0x19
    12ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a e7       	ldi	r20, 0x7A	; 122
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8d 8b       	std	Y+21, r24	; 0x15
    1302:	9e 8b       	std	Y+22, r25	; 0x16
    1304:	af 8b       	std	Y+23, r26	; 0x17
    1306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1308:	6d 89       	ldd	r22, Y+21	; 0x15
    130a:	7e 89       	ldd	r23, Y+22	; 0x16
    130c:	8f 89       	ldd	r24, Y+23	; 0x17
    130e:	98 8d       	ldd	r25, Y+24	; 0x18
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <LCD_sendCommand+0x68a>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9c 8b       	std	Y+20, r25	; 0x14
    1326:	8b 8b       	std	Y+19, r24	; 0x13
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <LCD_sendCommand+0x708>
	else if (__tmp > 65535)
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <LCD_sendCommand+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	69 8d       	ldd	r22, Y+25	; 0x19
    1344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9c 8b       	std	Y+20, r25	; 0x14
    1368:	8b 8b       	std	Y+19, r24	; 0x13
    136a:	0f c0       	rjmp	.+30     	; 0x138a <LCD_sendCommand+0x6ea>
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9a 8b       	std	Y+18, r25	; 0x12
    1372:	89 8b       	std	Y+17, r24	; 0x11
    1374:	89 89       	ldd	r24, Y+17	; 0x11
    1376:	9a 89       	ldd	r25, Y+18	; 0x12
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <LCD_sendCommand+0x6d8>
    137c:	9a 8b       	std	Y+18, r25	; 0x12
    137e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9c 8b       	std	Y+20, r25	; 0x14
    1388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8b 89       	ldd	r24, Y+19	; 0x13
    138c:	9c 89       	ldd	r25, Y+20	; 0x14
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <LCD_sendCommand+0x6cc>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <LCD_sendCommand+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6d 89       	ldd	r22, Y+21	; 0x15
    1396:	7e 89       	ldd	r23, Y+22	; 0x16
    1398:	8f 89       	ldd	r24, Y+23	; 0x17
    139a:	98 8d       	ldd	r25, Y+24	; 0x18
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9c 8b       	std	Y+20, r25	; 0x14
    13a6:	8b 8b       	std	Y+19, r24	; 0x13
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	98 8b       	std	Y+16, r25	; 0x10
    13ae:	8f 87       	std	Y+15, r24	; 0x0f
    13b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b2:	98 89       	ldd	r25, Y+16	; 0x10
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <LCD_sendCommand+0x714>
    13b8:	98 8b       	std	Y+16, r25	; 0x10
    13ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8b 7f       	andi	r24, 0xFB	; 251
    13c4:	80 83       	st	Z, r24
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e8       	ldi	r26, 0x80	; 128
    13cc:	bf e3       	ldi	r27, 0x3F	; 63
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	ad 87       	std	Y+13, r26	; 0x0d
    13d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a e7       	ldi	r20, 0x7A	; 122
    13e4:	53 e4       	ldi	r21, 0x43	; 67
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8f 83       	std	Y+7, r24	; 0x07
    13f0:	98 87       	std	Y+8, r25	; 0x08
    13f2:	a9 87       	std	Y+9, r26	; 0x09
    13f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <LCD_sendCommand+0x778>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6b 85       	ldd	r22, Y+11	; 0x0b
    1432:	7c 85       	ldd	r23, Y+12	; 0x0c
    1434:	8d 85       	ldd	r24, Y+13	; 0x0d
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <LCD_sendCommand+0x7d8>
    145a:	89 e1       	ldi	r24, 0x19	; 25
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_sendCommand+0x7c6>
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <LCD_sendCommand+0x7ba>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <LCD_sendCommand+0x802>
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    14aa:	cd 59       	subi	r28, 0x9D	; 157
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <LCD_sendCharacter>:

void LCD_sendCharacter(uint8 a_data){
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	c3 56       	subi	r28, 0x63	; 99
    14d0:	d0 40       	sbci	r29, 0x00	; 0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 59       	subi	r30, 0x9D	; 157
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 83       	st	Z, r24
	LCD_CTRL_REG_PORT.BITS.RS=HIGH;
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	80 83       	st	Z, r24
	LCD_CTRL_REG_PORT.BITS.RW=LOW;
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	80 83       	st	Z, r24
    14f8:	fe 01       	movw	r30, r28
    14fa:	e1 5a       	subi	r30, 0xA1	; 161
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e8       	ldi	r26, 0x80	; 128
    1504:	bf e3       	ldi	r27, 0x3F	; 63
    1506:	80 83       	st	Z, r24
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	a2 83       	std	Z+2, r26	; 0x02
    150c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	8e 01       	movw	r16, r28
    1510:	05 5a       	subi	r16, 0xA5	; 165
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	e1 5a       	subi	r30, 0xA1	; 161
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a e7       	ldi	r20, 0x7A	; 122
    1528:	53 e4       	ldi	r21, 0x43	; 67
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    153c:	fe 01       	movw	r30, r28
    153e:	e5 5a       	subi	r30, 0xA5	; 165
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1556:	88 23       	and	r24, r24
    1558:	44 f4       	brge	.+16     	; 0x156a <LCD_sendCharacter+0xa8>
		__ticks = 1;
    155a:	fe 01       	movw	r30, r28
    155c:	e7 5a       	subi	r30, 0xA7	; 167
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	80 83       	st	Z, r24
    1568:	64 c0       	rjmp	.+200    	; 0x1632 <LCD_sendCharacter+0x170>
	else if (__tmp > 65535)
    156a:	fe 01       	movw	r30, r28
    156c:	e5 5a       	subi	r30, 0xA5	; 165
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	4f e7       	ldi	r20, 0x7F	; 127
    157e:	57 e4       	ldi	r21, 0x47	; 71
    1580:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1584:	18 16       	cp	r1, r24
    1586:	0c f0       	brlt	.+2      	; 0x158a <LCD_sendCharacter+0xc8>
    1588:	43 c0       	rjmp	.+134    	; 0x1610 <LCD_sendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	fe 01       	movw	r30, r28
    158c:	e1 5a       	subi	r30, 0xA1	; 161
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8e 01       	movw	r16, r28
    15aa:	07 5a       	subi	r16, 0xA7	; 167
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	f8 01       	movw	r30, r16
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
    15c0:	1f c0       	rjmp	.+62     	; 0x1600 <LCD_sendCharacter+0x13e>
    15c2:	fe 01       	movw	r30, r28
    15c4:	e9 5a       	subi	r30, 0xA9	; 169
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	89 e1       	ldi	r24, 0x19	; 25
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	fe 01       	movw	r30, r28
    15d2:	e9 5a       	subi	r30, 0xA9	; 169
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_sendCharacter+0x118>
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 5a       	subi	r30, 0xA9	; 169
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	de 01       	movw	r26, r28
    15ea:	a7 5a       	subi	r26, 0xA7	; 167
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	e7 5a       	subi	r30, 0xA7	; 167
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	9c 93       	st	X, r25
    15fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	fe 01       	movw	r30, r28
    1602:	e7 5a       	subi	r30, 0xA7	; 167
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	d1 f6       	brne	.-76     	; 0x15c2 <LCD_sendCharacter+0x100>
    160e:	27 c0       	rjmp	.+78     	; 0x165e <LCD_sendCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	8e 01       	movw	r16, r28
    1612:	07 5a       	subi	r16, 0xA7	; 167
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	fe 01       	movw	r30, r28
    1618:	e5 5a       	subi	r30, 0xA5	; 165
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	f8 01       	movw	r30, r16
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	80 83       	st	Z, r24
    1632:	de 01       	movw	r26, r28
    1634:	ab 5a       	subi	r26, 0xAB	; 171
    1636:	bf 4f       	sbci	r27, 0xFF	; 255
    1638:	fe 01       	movw	r30, r28
    163a:	e7 5a       	subi	r30, 0xA7	; 167
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	8d 93       	st	X+, r24
    1644:	9c 93       	st	X, r25
    1646:	fe 01       	movw	r30, r28
    1648:	eb 5a       	subi	r30, 0xAB	; 171
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCharacter+0x18e>
    1654:	fe 01       	movw	r30, r28
    1656:	eb 5a       	subi	r30, 0xAB	; 171
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
	_delay_ms(1);
#elif(DATA_BIT_MODE ==4)
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=HIGH;
    165e:	e5 e3       	ldi	r30, 0x35	; 53
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	84 60       	ori	r24, 0x04	; 4
    1666:	80 83       	st	Z, r24
    1668:	fe 01       	movw	r30, r28
    166a:	ef 5a       	subi	r30, 0xAF	; 175
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e8       	ldi	r26, 0x80	; 128
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	80 83       	st	Z, r24
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	a2 83       	std	Z+2, r26	; 0x02
    167c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	8e 01       	movw	r16, r28
    1680:	03 5b       	subi	r16, 0xB3	; 179
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	fe 01       	movw	r30, r28
    1686:	ef 5a       	subi	r30, 0xAF	; 175
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	80 83       	st	Z, r24
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	a2 83       	std	Z+2, r26	; 0x02
    16aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ac:	fe 01       	movw	r30, r28
    16ae:	e3 5b       	subi	r30, 0xB3	; 179
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	44 f4       	brge	.+16     	; 0x16da <LCD_sendCharacter+0x218>
		__ticks = 1;
    16ca:	fe 01       	movw	r30, r28
    16cc:	e5 5b       	subi	r30, 0xB5	; 181
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	64 c0       	rjmp	.+200    	; 0x17a2 <LCD_sendCharacter+0x2e0>
	else if (__tmp > 65535)
    16da:	fe 01       	movw	r30, r28
    16dc:	e3 5b       	subi	r30, 0xB3	; 179
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	0c f0       	brlt	.+2      	; 0x16fa <LCD_sendCharacter+0x238>
    16f8:	43 c0       	rjmp	.+134    	; 0x1780 <LCD_sendCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	fe 01       	movw	r30, r28
    16fc:	ef 5a       	subi	r30, 0xAF	; 175
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8e 01       	movw	r16, r28
    171a:	05 5b       	subi	r16, 0xB5	; 181
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	1f c0       	rjmp	.+62     	; 0x1770 <LCD_sendCharacter+0x2ae>
    1732:	fe 01       	movw	r30, r28
    1734:	e7 5b       	subi	r30, 0xB7	; 183
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	89 e1       	ldi	r24, 0x19	; 25
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	fe 01       	movw	r30, r28
    1742:	e7 5b       	subi	r30, 0xB7	; 183
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_sendCharacter+0x288>
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5b       	subi	r30, 0xB7	; 183
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	de 01       	movw	r26, r28
    175a:	a5 5b       	subi	r26, 0xB5	; 181
    175c:	bf 4f       	sbci	r27, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	e5 5b       	subi	r30, 0xB5	; 181
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	9c 93       	st	X, r25
    176e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1770:	fe 01       	movw	r30, r28
    1772:	e5 5b       	subi	r30, 0xB5	; 181
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	d1 f6       	brne	.-76     	; 0x1732 <LCD_sendCharacter+0x270>
    177e:	27 c0       	rjmp	.+78     	; 0x17ce <LCD_sendCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	8e 01       	movw	r16, r28
    1782:	05 5b       	subi	r16, 0xB5	; 181
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5b       	subi	r30, 0xB3	; 179
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	de 01       	movw	r26, r28
    17a4:	a9 5b       	subi	r26, 0xB9	; 185
    17a6:	bf 4f       	sbci	r27, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e5 5b       	subi	r30, 0xB5	; 181
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	8d 93       	st	X+, r24
    17b4:	9c 93       	st	X, r25
    17b6:	fe 01       	movw	r30, r28
    17b8:	e9 5b       	subi	r30, 0xB9	; 185
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_sendCharacter+0x2fe>
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 5b       	subi	r30, 0xB9	; 185
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_DATA_REG_PORT.data=(LCD_DATA_REG_PORT.data & 0X0F)|(a_data& 0XF0) ;
    17ce:	a5 e3       	ldi	r26, 0x35	; 53
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e3       	ldi	r30, 0x35	; 53
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	98 2f       	mov	r25, r24
    17da:	9f 70       	andi	r25, 0x0F	; 15
    17dc:	fe 01       	movw	r30, r28
    17de:	ed 59       	subi	r30, 0x9D	; 157
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 81       	ld	r24, Z
    17e4:	80 7f       	andi	r24, 0xF0	; 240
    17e6:	89 2b       	or	r24, r25
    17e8:	8c 93       	st	X, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	ed 5b       	subi	r30, 0xBD	; 189
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e8       	ldi	r26, 0x80	; 128
    17f6:	bf e3       	ldi	r27, 0x3F	; 63
    17f8:	80 83       	st	Z, r24
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	a2 83       	std	Z+2, r26	; 0x02
    17fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	8e 01       	movw	r16, r28
    1802:	01 5c       	subi	r16, 0xC1	; 193
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	ed 5b       	subi	r30, 0xBD	; 189
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	53 e4       	ldi	r21, 0x43	; 67
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182e:	fe 01       	movw	r30, r28
    1830:	ff 96       	adiw	r30, 0x3f	; 63
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_sendCharacter+0x392>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e af       	std	Y+62, r25	; 0x3e
    1850:	8d af       	std	Y+61, r24	; 0x3d
    1852:	46 c0       	rjmp	.+140    	; 0x18e0 <LCD_sendCharacter+0x41e>
	else if (__tmp > 65535)
    1854:	fe 01       	movw	r30, r28
    1856:	ff 96       	adiw	r30, 0x3f	; 63
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	64 f5       	brge	.+88     	; 0x18c8 <LCD_sendCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	fe 01       	movw	r30, r28
    1872:	ed 5b       	subi	r30, 0xBD	; 189
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e af       	std	Y+62, r25	; 0x3e
    189c:	8d af       	std	Y+61, r24	; 0x3d
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_sendCharacter+0x3fc>
    18a0:	89 e1       	ldi	r24, 0x19	; 25
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c af       	std	Y+60, r25	; 0x3c
    18a6:	8b af       	std	Y+59, r24	; 0x3b
    18a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    18aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_sendCharacter+0x3ea>
    18b0:	9c af       	std	Y+60, r25	; 0x3c
    18b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9e af       	std	Y+62, r25	; 0x3e
    18bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_sendCharacter+0x3de>
    18c6:	16 c0       	rjmp	.+44     	; 0x18f4 <LCD_sendCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	fe 01       	movw	r30, r28
    18ca:	ff 96       	adiw	r30, 0x3f	; 63
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e af       	std	Y+62, r25	; 0x3e
    18de:	8d af       	std	Y+61, r24	; 0x3d
    18e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e4:	9a af       	std	Y+58, r25	; 0x3a
    18e6:	89 af       	std	Y+57, r24	; 0x39
    18e8:	89 ad       	ldd	r24, Y+57	; 0x39
    18ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCharacter+0x42a>
    18f0:	9a af       	std	Y+58, r25	; 0x3a
    18f2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
    18f4:	e5 e3       	ldi	r30, 0x35	; 53
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8b 7f       	andi	r24, 0xFB	; 251
    18fc:	80 83       	st	Z, r24
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e8       	ldi	r26, 0x80	; 128
    1904:	bf e3       	ldi	r27, 0x3F	; 63
    1906:	8d ab       	std	Y+53, r24	; 0x35
    1908:	9e ab       	std	Y+54, r25	; 0x36
    190a:	af ab       	std	Y+55, r26	; 0x37
    190c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6d a9       	ldd	r22, Y+53	; 0x35
    1910:	7e a9       	ldd	r23, Y+54	; 0x36
    1912:	8f a9       	ldd	r24, Y+55	; 0x37
    1914:	98 ad       	ldd	r25, Y+56	; 0x38
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a e7       	ldi	r20, 0x7A	; 122
    191c:	53 e4       	ldi	r21, 0x43	; 67
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	89 ab       	std	Y+49, r24	; 0x31
    1928:	9a ab       	std	Y+50, r25	; 0x32
    192a:	ab ab       	std	Y+51, r26	; 0x33
    192c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <LCD_sendCharacter+0x48e>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	98 ab       	std	Y+48, r25	; 0x30
    194c:	8f a7       	std	Y+47, r24	; 0x2f
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <LCD_sendCharacter+0x50c>
	else if (__tmp > 65535)
    1950:	69 a9       	ldd	r22, Y+49	; 0x31
    1952:	7a a9       	ldd	r23, Y+50	; 0x32
    1954:	8b a9       	ldd	r24, Y+51	; 0x33
    1956:	9c a9       	ldd	r25, Y+52	; 0x34
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <LCD_sendCharacter+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6d a9       	ldd	r22, Y+53	; 0x35
    196a:	7e a9       	ldd	r23, Y+54	; 0x36
    196c:	8f a9       	ldd	r24, Y+55	; 0x37
    196e:	98 ad       	ldd	r25, Y+56	; 0x38
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	98 ab       	std	Y+48, r25	; 0x30
    198e:	8f a7       	std	Y+47, r24	; 0x2f
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_sendCharacter+0x4ee>
    1992:	89 e1       	ldi	r24, 0x19	; 25
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e a7       	std	Y+46, r25	; 0x2e
    1998:	8d a7       	std	Y+45, r24	; 0x2d
    199a:	8d a5       	ldd	r24, Y+45	; 0x2d
    199c:	9e a5       	ldd	r25, Y+46	; 0x2e
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_sendCharacter+0x4dc>
    19a2:	9e a7       	std	Y+46, r25	; 0x2e
    19a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a8:	98 a9       	ldd	r25, Y+48	; 0x30
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	98 ab       	std	Y+48, r25	; 0x30
    19ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b2:	98 a9       	ldd	r25, Y+48	; 0x30
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <LCD_sendCharacter+0x4d0>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <LCD_sendCharacter+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	69 a9       	ldd	r22, Y+49	; 0x31
    19bc:	7a a9       	ldd	r23, Y+50	; 0x32
    19be:	8b a9       	ldd	r24, Y+51	; 0x33
    19c0:	9c a9       	ldd	r25, Y+52	; 0x34
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	98 ab       	std	Y+48, r25	; 0x30
    19cc:	8f a7       	std	Y+47, r24	; 0x2f
    19ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d0:	98 a9       	ldd	r25, Y+48	; 0x30
    19d2:	9c a7       	std	Y+44, r25	; 0x2c
    19d4:	8b a7       	std	Y+43, r24	; 0x2b
    19d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_sendCharacter+0x518>
    19de:	9c a7       	std	Y+44, r25	; 0x2c
    19e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=HIGH;
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	84 60       	ori	r24, 0x04	; 4
    19ea:	80 83       	st	Z, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	8f a3       	std	Y+39, r24	; 0x27
    19f6:	98 a7       	std	Y+40, r25	; 0x28
    19f8:	a9 a7       	std	Y+41, r26	; 0x29
    19fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6f a1       	ldd	r22, Y+39	; 0x27
    19fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1a00:	89 a5       	ldd	r24, Y+41	; 0x29
    1a02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8b a3       	std	Y+35, r24	; 0x23
    1a16:	9c a3       	std	Y+36, r25	; 0x24
    1a18:	ad a3       	std	Y+37, r26	; 0x25
    1a1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a20:	8d a1       	ldd	r24, Y+37	; 0x25
    1a22:	9e a1       	ldd	r25, Y+38	; 0x26
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCD_sendCharacter+0x57c>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCD_sendCharacter+0x5fa>
	else if (__tmp > 65535)
    1a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a40:	7c a1       	ldd	r23, Y+36	; 0x24
    1a42:	8d a1       	ldd	r24, Y+37	; 0x25
    1a44:	9e a1       	ldd	r25, Y+38	; 0x26
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCD_sendCharacter+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6f a1       	ldd	r22, Y+39	; 0x27
    1a58:	78 a5       	ldd	r23, Y+40	; 0x28
    1a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9a a3       	std	Y+34, r25	; 0x22
    1a7c:	89 a3       	std	Y+33, r24	; 0x21
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCD_sendCharacter+0x5dc>
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	98 a3       	std	Y+32, r25	; 0x20
    1a86:	8f 8f       	std	Y+31, r24	; 0x1f
    1a88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCharacter+0x5ca>
    1a90:	98 a3       	std	Y+32, r25	; 0x20
    1a92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	89 a1       	ldd	r24, Y+33	; 0x21
    1a96:	9a a1       	ldd	r25, Y+34	; 0x22
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9a a3       	std	Y+34, r25	; 0x22
    1a9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCD_sendCharacter+0x5be>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCD_sendCharacter+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1aac:	8d a1       	ldd	r24, Y+37	; 0x25
    1aae:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
    1abc:	89 a1       	ldd	r24, Y+33	; 0x21
    1abe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ac4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_sendCharacter+0x606>
    1acc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ace:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_REG_PORT.data=(LCD_DATA_REG_PORT.data & 0X0F)|((a_data& 0X0f)<<4) ;
    1ad0:	a5 e3       	ldi	r26, 0x35	; 53
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e3       	ldi	r30, 0x35	; 53
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	2f 70       	andi	r18, 0x0F	; 15
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ed 59       	subi	r30, 0x9D	; 157
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	82 95       	swap	r24
    1aec:	92 95       	swap	r25
    1aee:	90 7f       	andi	r25, 0xF0	; 240
    1af0:	98 27       	eor	r25, r24
    1af2:	80 7f       	andi	r24, 0xF0	; 240
    1af4:	98 27       	eor	r25, r24
    1af6:	82 2b       	or	r24, r18
    1af8:	8c 93       	st	X, r24
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a0 e8       	ldi	r26, 0x80	; 128
    1b00:	bf e3       	ldi	r27, 0x3F	; 63
    1b02:	89 8f       	std	Y+25, r24	; 0x19
    1b04:	9a 8f       	std	Y+26, r25	; 0x1a
    1b06:	ab 8f       	std	Y+27, r26	; 0x1b
    1b08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	4a e7       	ldi	r20, 0x7A	; 122
    1b18:	53 e4       	ldi	r21, 0x43	; 67
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	8d 8b       	std	Y+21, r24	; 0x15
    1b24:	9e 8b       	std	Y+22, r25	; 0x16
    1b26:	af 8b       	std	Y+23, r26	; 0x17
    1b28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b30:	98 8d       	ldd	r25, Y+24	; 0x18
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e8       	ldi	r20, 0x80	; 128
    1b38:	5f e3       	ldi	r21, 0x3F	; 63
    1b3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3e:	88 23       	and	r24, r24
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <LCD_sendCharacter+0x68a>
		__ticks = 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
    1b4a:	3f c0       	rjmp	.+126    	; 0x1bca <LCD_sendCharacter+0x708>
	else if (__tmp > 65535)
    1b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b50:	8f 89       	ldd	r24, Y+23	; 0x17
    1b52:	98 8d       	ldd	r25, Y+24	; 0x18
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	4f e7       	ldi	r20, 0x7F	; 127
    1b5a:	57 e4       	ldi	r21, 0x47	; 71
    1b5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b60:	18 16       	cp	r1, r24
    1b62:	4c f5       	brge	.+82     	; 0x1bb6 <LCD_sendCharacter+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b64:	69 8d       	ldd	r22, Y+25	; 0x19
    1b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e2       	ldi	r20, 0x20	; 32
    1b72:	51 e4       	ldi	r21, 0x41	; 65
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9c 8b       	std	Y+20, r25	; 0x14
    1b8a:	8b 8b       	std	Y+19, r24	; 0x13
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <LCD_sendCharacter+0x6ea>
    1b8e:	89 e1       	ldi	r24, 0x19	; 25
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9a 8b       	std	Y+18, r25	; 0x12
    1b94:	89 8b       	std	Y+17, r24	; 0x11
    1b96:	89 89       	ldd	r24, Y+17	; 0x11
    1b98:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_sendCharacter+0x6d8>
    1b9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	9c 8b       	std	Y+20, r25	; 0x14
    1baa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bac:	8b 89       	ldd	r24, Y+19	; 0x13
    1bae:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	69 f7       	brne	.-38     	; 0x1b8e <LCD_sendCharacter+0x6cc>
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <LCD_sendCharacter+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9c 8b       	std	Y+20, r25	; 0x14
    1bc8:	8b 8b       	std	Y+19, r24	; 0x13
    1bca:	8b 89       	ldd	r24, Y+19	; 0x13
    1bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bce:	98 8b       	std	Y+16, r25	; 0x10
    1bd0:	8f 87       	std	Y+15, r24	; 0x0f
    1bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd4:	98 89       	ldd	r25, Y+16	; 0x10
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <LCD_sendCharacter+0x714>
    1bda:	98 8b       	std	Y+16, r25	; 0x10
    1bdc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CTRL_REG_PORT.BITS.E=LOW;
    1bde:	e5 e3       	ldi	r30, 0x35	; 53
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8b 7f       	andi	r24, 0xFB	; 251
    1be6:	80 83       	st	Z, r24
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e8       	ldi	r26, 0x80	; 128
    1bee:	bf e3       	ldi	r27, 0x3F	; 63
    1bf0:	8b 87       	std	Y+11, r24	; 0x0b
    1bf2:	9c 87       	std	Y+12, r25	; 0x0c
    1bf4:	ad 87       	std	Y+13, r26	; 0x0d
    1bf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	53 e4       	ldi	r21, 0x43	; 67
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8f 83       	std	Y+7, r24	; 0x07
    1c12:	98 87       	std	Y+8, r25	; 0x08
    1c14:	a9 87       	std	Y+9, r26	; 0x09
    1c16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <LCD_sendCharacter+0x778>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <LCD_sendCharacter+0x7f6>
	else if (__tmp > 65535)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <LCD_sendCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_sendCharacter+0x7d8>
    1c7c:	89 e1       	ldi	r24, 0x19	; 25
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_sendCharacter+0x7c6>
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <LCD_sendCharacter+0x7ba>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <LCD_sendCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_sendCharacter+0x802>
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    1ccc:	cd 59       	subi	r28, 0x9D	; 157
    1cce:	df 4f       	sbci	r29, 0xFF	; 255
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <LCD_displayString>:

void LCD_displayString(char *str){
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <LCD_displayString+0x6>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	9b 83       	std	Y+3, r25	; 0x03
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <LCD_displayString+0x30>
	while(str[i]!='\0'){
		LCD_sendCharacter(str[i]);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_sendCharacter>
		i++;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_displayString(char *str){
	uint8 i =0;
	while(str[i]!='\0'){
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e2 0f       	add	r30, r18
    1d22:	f3 1f       	adc	r31, r19
    1d24:	80 81       	ld	r24, Z
    1d26:	88 23       	and	r24, r24
    1d28:	39 f7       	brne	.-50     	; 0x1cf8 <LCD_displayString+0x14>
		LCD_sendCharacter(str[i]);
		i++;
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <LCD_goToRowColumn+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <LCD_goToRowColumn+0x8>
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3d 83       	std	Y+5, r19	; 0x05
    1d50:	2c 83       	std	Y+4, r18	; 0x04
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	c1 f0       	breq	.+48     	; 0x1d8c <LCD_goToRowColumn+0x56>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <LCD_goToRowColumn+0x3a>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <LCD_goToRowColumn+0x50>
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <LCD_goToRowColumn+0x6c>
    1d70:	2c 81       	ldd	r18, Y+4	; 0x04
    1d72:	3d 81       	ldd	r19, Y+5	; 0x05
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	69 f0       	breq	.+26     	; 0x1d94 <LCD_goToRowColumn+0x5e>
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <LCD_goToRowColumn+0x66>
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0b c0       	rjmp	.+22     	; 0x1da2 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	80 5c       	subi	r24, 0xC0	; 192
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	80 5f       	subi	r24, 0xF0	; 240
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	80 5b       	subi	r24, 0xB0	; 176
    1da0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <LCD_displayStringRowColumn+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <LCD_displayStringRowColumn+0x8>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	6a 83       	std	Y+2, r22	; 0x02
    1dca:	5c 83       	std	Y+4, r21	; 0x04
    1dcc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	62 97       	sbiw	r28, 0x12	; 18
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	9a 89       	ldd	r25, Y+18	; 0x12
    1e08:	9e 01       	movw	r18, r28
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	b9 01       	movw	r22, r18
    1e10:	4a e0       	ldi	r20, 0x0A	; 10
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <itoa>
	LCD_displayString(buff);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    1e20:	62 96       	adiw	r28, 0x12	; 18
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <UART_init>:
 */


#include"uart.h"

void UART_init(void){
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	UCSRA |=(1<<U2X);
    1e3a:	ab e2       	ldi	r26, 0x2B	; 43
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	eb e2       	ldi	r30, 0x2B	; 43
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
	UCSRB =(1<<RXEN)|(1<<TXEN);
    1e48:	ea e2       	ldi	r30, 0x2A	; 42
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	88 e1       	ldi	r24, 0x18	; 24
    1e4e:	80 83       	st	Z, r24
	UCSRC =(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1e50:	e0 e4       	ldi	r30, 0x40	; 64
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	86 e8       	ldi	r24, 0x86	; 134
    1e56:	80 83       	st	Z, r24
	UBRRL = 103;
    1e58:	e9 e2       	ldi	r30, 0x29	; 41
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	87 e6       	ldi	r24, 0x67	; 103
    1e5e:	80 83       	st	Z, r24
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <UART_sendByte>:

void UART_sendByte(uint8 data){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1e72:	ec e2       	ldi	r30, 0x2C	; 44
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){}
    1e7a:	eb e2       	ldi	r30, 0x2B	; 43
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	80 74       	andi	r24, 0x40	; 64
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	b9 f3       	breq	.-18     	; 0x1e7a <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
    1e8c:	ab e2       	ldi	r26, 0x2B	; 43
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e2       	ldi	r30, 0x2B	; 43
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 64       	ori	r24, 0x40	; 64
    1e98:	8c 93       	st	X, r24

}
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <UART_recieveByte>:

uint8 UART_recieveByte(void){
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1eaa:	eb e2       	ldi	r30, 0x2B	; 43
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	88 23       	and	r24, r24
    1eb2:	dc f7       	brge	.-10     	; 0x1eaa <UART_recieveByte+0x8>
	return UDR;
    1eb4:	ec e2       	ldi	r30, 0x2C	; 44
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
}
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <UART_sendArray>:



void UART_sendArray(uint8 *data,uint8 size){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <UART_sendArray+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <UART_sendArray+0x8>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9b 83       	std	Y+3, r25	; 0x03
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <UART_sendArray+0x32>
	while (i<size){
		UART_sendByte(data[i]);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	80 81       	ld	r24, Z
    1ee8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <UART_sendByte>
		i++;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	89 83       	std	Y+1, r24	; 0x01



void UART_sendArray(uint8 *data,uint8 size){
	uint8 i=0;
	while (i<size){
    1ef2:	99 81       	ldd	r25, Y+1	; 0x01
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	98 17       	cp	r25, r24
    1ef8:	70 f3       	brcs	.-36     	; 0x1ed6 <UART_sendArray+0x16>
		UART_sendByte(data[i]);
		i++;
	}
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <UART_recieveArray>:
 void UART_recieveArray(uint8 *data, uint8 size){
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <UART_recieveArray+0xa>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <UART_recieveArray+0xc>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9b 83       	std	Y+3, r25	; 0x03
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6c 83       	std	Y+4, r22	; 0x04
	 uint8 i =0;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <UART_recieveArray+0x38>
	 while(i<size){
		 data[i] = UART_recieveByte();
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	02 0f       	add	r16, r18
    1f30:	13 1f       	adc	r17, r19
    1f32:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <UART_recieveByte>
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 83       	st	Z, r24
		 i++;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}
}
 void UART_recieveArray(uint8 *data, uint8 size){
	 uint8 i =0;
	 while(i<size){
    1f40:	99 81       	ldd	r25, Y+1	; 0x01
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	98 17       	cp	r25, r24
    1f46:	68 f3       	brcs	.-38     	; 0x1f22 <UART_recieveArray+0x1a>
		 data[i] = UART_recieveByte();
		 i++;
	 }
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <main>:
uint8 pass[PASS_SIZE];
uint8 passMatch[PASS_SIZE];
uint8 currentPass[PASS_SIZE]={1,2,4,8};


int main (void){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	6d 97       	sbiw	r28, 0x1d	; 29
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	UART_init();
    1f6e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <UART_init>
	uint8 key;
	start();
    1f72:	0e 94 de 10 	call	0x21bc	; 0x21bc <start>
	while(TRUE){
		key = KEYPAD_getPressedKey();
    1f76:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    1f7a:	8d 8f       	std	Y+29, r24	; 0x1d
		if(key == '*'){
    1f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f7e:	8a 32       	cpi	r24, 0x2A	; 42
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <main+0x2a>
    1f82:	12 c1       	rjmp	.+548    	; 0x21a8 <main+0x24e>
			getCurrentUserPassword(pass,PASS_SIZE);
    1f84:	82 e3       	ldi	r24, 0x32	; 50
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	64 e0       	ldi	r22, 0x04	; 4
    1f8a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <getCurrentUserPassword>
			UART_sendByte(PASS_SIZE);
    1f8e:	84 e0       	ldi	r24, 0x04	; 4
    1f90:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <UART_sendByte>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a8 e4       	ldi	r26, 0x48	; 72
    1f9a:	b2 e4       	ldi	r27, 0x42	; 66
    1f9c:	89 8f       	std	Y+25, r24	; 0x19
    1f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a e7       	ldi	r20, 0x7A	; 122
    1fb2:	53 e4       	ldi	r21, 0x43	; 67
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8d 8b       	std	Y+21, r24	; 0x15
    1fbe:	9e 8b       	std	Y+22, r25	; 0x16
    1fc0:	af 8b       	std	Y+23, r26	; 0x17
    1fc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <main+0x8c>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <main+0x10a>
	else if (__tmp > 65535)
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <main+0xec>
    2028:	89 e1       	ldi	r24, 0x19	; 25
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	89 8b       	std	Y+17, r24	; 0x11
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	9a 89       	ldd	r25, Y+18	; 0x12
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <main+0xda>
    2038:	9a 8b       	std	Y+18, r25	; 0x12
    203a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <main+0xce>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6d 89       	ldd	r22, Y+21	; 0x15
    2052:	7e 89       	ldd	r23, Y+22	; 0x16
    2054:	8f 89       	ldd	r24, Y+23	; 0x17
    2056:	98 8d       	ldd	r25, Y+24	; 0x18
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	98 8b       	std	Y+16, r25	; 0x10
    206a:	8f 87       	std	Y+15, r24	; 0x0f
    206c:	8f 85       	ldd	r24, Y+15	; 0x0f
    206e:	98 89       	ldd	r25, Y+16	; 0x10
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <main+0x116>
    2074:	98 8b       	std	Y+16, r25	; 0x10
    2076:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			UART_sendArray(pass,PASS_SIZE);
    2078:	82 e3       	ldi	r24, 0x32	; 50
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	64 e0       	ldi	r22, 0x04	; 4
    207e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <UART_sendArray>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	aa ef       	ldi	r26, 0xFA	; 250
    2088:	b3 e4       	ldi	r27, 0x43	; 67
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <main+0x17a>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <main+0x1f8>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <main+0x1da>
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <main+0x1c8>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <main+0x1bc>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <main+0x204>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			matchFlag = UART_recieveByte();
    2166:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <UART_recieveByte>
    216a:	80 93 3a 01 	sts	0x013A, r24
			if(matchFlag==TRUE){
    216e:	80 91 3a 01 	lds	r24, 0x013A
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	09 f0       	breq	.+2      	; 0x2178 <main+0x21e>
    2176:	ff ce       	rjmp	.-514    	; 0x1f76 <main+0x1c>
				getUserNewPassword( pass,passMatch,PASS_SIZE);
    2178:	82 e3       	ldi	r24, 0x32	; 50
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	26 e3       	ldi	r18, 0x36	; 54
    217e:	31 e0       	ldi	r19, 0x01	; 1
    2180:	b9 01       	movw	r22, r18
    2182:	44 e0       	ldi	r20, 0x04	; 4
    2184:	0e 94 2f 12 	call	0x245e	; 0x245e <getUserNewPassword>
				checkNewPasswordMatching(pass, passMatch,currentPass,PASS_SIZE);
    2188:	82 e3       	ldi	r24, 0x32	; 50
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	26 e3       	ldi	r18, 0x36	; 54
    218e:	31 e0       	ldi	r19, 0x01	; 1
    2190:	4e e2       	ldi	r20, 0x2E	; 46
    2192:	51 e0       	ldi	r21, 0x01	; 1
    2194:	b9 01       	movw	r22, r18
    2196:	24 e0       	ldi	r18, 0x04	; 4
    2198:	0e 94 79 14 	call	0x28f2	; 0x28f2 <checkNewPasswordMatching>
				UART_sendArray(currentPass,PASS_SIZE);
    219c:	8e e2       	ldi	r24, 0x2E	; 46
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <UART_sendArray>
    21a6:	e7 ce       	rjmp	.-562    	; 0x1f76 <main+0x1c>
			}

		}
		else if (key == '#'){
    21a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21aa:	83 32       	cpi	r24, 0x23	; 35
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <main+0x256>
    21ae:	e3 ce       	rjmp	.-570    	; 0x1f76 <main+0x1c>
			getUserPasswordToOpenDoor(pass,PASS_SIZE);
    21b0:	82 e3       	ldi	r24, 0x32	; 50
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	64 e0       	ldi	r22, 0x04	; 4
    21b6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <getUserPasswordToOpenDoor>
    21ba:	dd ce       	rjmp	.-582    	; 0x1f76 <main+0x1c>

000021bc <start>:

#include"userinterfaceFunctions.h"

static void setNewUserPassword(uint8 * pass ,uint8 * currentPass, uint8 PASS_SIZE);

void start(void){
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	2e 97       	sbiw	r28, 0x0e	; 14
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    21d0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LCD_init>
	LCD_displayString("Door Security");
    21d4:	80 e6       	ldi	r24, 0x60	; 96
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e8       	ldi	r25, 0x80	; 128
    21e0:	ab e3       	ldi	r26, 0x3B	; 59
    21e2:	b5 e4       	ldi	r27, 0x45	; 69
    21e4:	8b 87       	std	Y+11, r24	; 0x0b
    21e6:	9c 87       	std	Y+12, r25	; 0x0c
    21e8:	ad 87       	std	Y+13, r26	; 0x0d
    21ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a e7       	ldi	r20, 0x7A	; 122
    21fa:	53 e4       	ldi	r21, 0x43	; 67
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8f 83       	std	Y+7, r24	; 0x07
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	a9 87       	std	Y+9, r26	; 0x09
    220a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <start+0x72>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <start+0xf0>
	else if (__tmp > 65535)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <start+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	0f c0       	rjmp	.+30     	; 0x228e <start+0xd2>
    2270:	89 e1       	ldi	r24, 0x19	; 25
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <start+0xc0>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <start+0xb4>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <start+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <start+0xfc>
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	LCD_sendCommand(CLEAR_COMMAND);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_displayString("Set pass:enter *");
    22c6:	8e e6       	ldi	r24, 0x6E	; 110
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
	LCD_displayString("Open door:enter#");
    22d6:	8f e7       	ldi	r24, 0x7F	; 127
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    22de:	2e 96       	adiw	r28, 0x0e	; 14
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <getCurrentUserPassword>:

void getCurrentUserPassword(uint8 * pass,uint8 PASS_SIZE){
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	62 97       	sbiw	r28, 0x12	; 18
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	99 8b       	std	Y+17, r25	; 0x11
    230a:	88 8b       	std	Y+16, r24	; 0x10
    230c:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i =0;
    230e:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_sendCommand(CLEAR_COMMAND);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_displayString("current pass:");
    2316:	80 e9       	ldi	r24, 0x90	; 144
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
    2326:	8b c0       	rjmp	.+278    	; 0x243e <getCurrentUserPassword+0x14e>
	while(i<PASS_SIZE){
		if(KEYPAD_getPressedKey()>=0 &&KEYPAD_getPressedKey()<=9){
    2328:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    232c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2330:	8a 30       	cpi	r24, 0x0A	; 10
    2332:	08 f0       	brcs	.+2      	; 0x2336 <getCurrentUserPassword+0x46>
    2334:	84 c0       	rjmp	.+264    	; 0x243e <getCurrentUserPassword+0x14e>
			pass[i]=KEYPAD_getPressedKey();
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	88 89       	ldd	r24, Y+16	; 0x10
    233e:	99 89       	ldd	r25, Y+17	; 0x11
    2340:	8c 01       	movw	r16, r24
    2342:	02 0f       	add	r16, r18
    2344:	13 1f       	adc	r17, r19
    2346:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    234a:	f8 01       	movw	r30, r16
    234c:	80 83       	st	Z, r24
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	aa e7       	ldi	r26, 0x7A	; 122
    2354:	b3 e4       	ldi	r27, 0x43	; 67
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	53 e4       	ldi	r21, 0x43	; 67
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <getCurrentUserPassword+0xb0>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <getCurrentUserPassword+0x12e>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <getCurrentUserPassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <getCurrentUserPassword+0x110>
    23e2:	89 e1       	ldi	r24, 0x19	; 25
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <getCurrentUserPassword+0xfe>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <getCurrentUserPassword+0xf2>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <getCurrentUserPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <getCurrentUserPassword+0x13a>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LCD_sendCharacter('*');
    2432:	8a e2       	ldi	r24, 0x2A	; 42
    2434:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_sendCharacter>
			i++;
    2438:	8f 85       	ldd	r24, Y+15	; 0x0f
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	8f 87       	std	Y+15, r24	; 0x0f
void getCurrentUserPassword(uint8 * pass,uint8 PASS_SIZE){
	uint8 i =0;
	LCD_sendCommand(CLEAR_COMMAND);
	LCD_displayString("current pass:");
	LCD_goToRowColumn(1,0);
	while(i<PASS_SIZE){
    243e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2440:	8a 89       	ldd	r24, Y+18	; 0x12
    2442:	98 17       	cp	r25, r24
    2444:	08 f4       	brcc	.+2      	; 0x2448 <getCurrentUserPassword+0x158>
    2446:	70 cf       	rjmp	.-288    	; 0x2328 <getCurrentUserPassword+0x38>
			LCD_sendCharacter('*');
			i++;
		}
	}

}
    2448:	62 96       	adiw	r28, 0x12	; 18
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <getUserNewPassword>:


void getUserNewPassword(uint8 * pass, uint8 * passMatch, uint8 PASS_SIZE){
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	ee 97       	sbiw	r28, 0x3e	; 62
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	9b af       	std	Y+59, r25	; 0x3b
    2478:	8a af       	std	Y+58, r24	; 0x3a
    247a:	7d af       	std	Y+61, r23	; 0x3d
    247c:	6c af       	std	Y+60, r22	; 0x3c
    247e:	4e af       	std	Y+62, r20	; 0x3e
	uint8 i=0;
    2480:	19 ae       	std	Y+57, r1	; 0x39
	LCD_sendCommand(CLEAR_COMMAND);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_displayString("note that pass");
    2488:	8e e9       	ldi	r24, 0x9E	; 158
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
	LCD_displayString("is 4 digits pin");
    2498:	8d ea       	ldi	r24, 0xAD	; 173
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	aa ef       	ldi	r26, 0xFA	; 250
    24a6:	b4 e4       	ldi	r27, 0x44	; 68
    24a8:	8d ab       	std	Y+53, r24	; 0x35
    24aa:	9e ab       	std	Y+54, r25	; 0x36
    24ac:	af ab       	std	Y+55, r26	; 0x37
    24ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b0:	6d a9       	ldd	r22, Y+53	; 0x35
    24b2:	7e a9       	ldd	r23, Y+54	; 0x36
    24b4:	8f a9       	ldd	r24, Y+55	; 0x37
    24b6:	98 ad       	ldd	r25, Y+56	; 0x38
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4a e7       	ldi	r20, 0x7A	; 122
    24be:	53 e4       	ldi	r21, 0x43	; 67
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	89 ab       	std	Y+49, r24	; 0x31
    24ca:	9a ab       	std	Y+50, r25	; 0x32
    24cc:	ab ab       	std	Y+51, r26	; 0x33
    24ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d0:	69 a9       	ldd	r22, Y+49	; 0x31
    24d2:	7a a9       	ldd	r23, Y+50	; 0x32
    24d4:	8b a9       	ldd	r24, Y+51	; 0x33
    24d6:	9c a9       	ldd	r25, Y+52	; 0x34
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <getUserNewPassword+0x94>
		__ticks = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
    24f0:	3f c0       	rjmp	.+126    	; 0x2570 <getUserNewPassword+0x112>
	else if (__tmp > 65535)
    24f2:	69 a9       	ldd	r22, Y+49	; 0x31
    24f4:	7a a9       	ldd	r23, Y+50	; 0x32
    24f6:	8b a9       	ldd	r24, Y+51	; 0x33
    24f8:	9c a9       	ldd	r25, Y+52	; 0x34
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	4c f5       	brge	.+82     	; 0x255c <getUserNewPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250a:	6d a9       	ldd	r22, Y+53	; 0x35
    250c:	7e a9       	ldd	r23, Y+54	; 0x36
    250e:	8f a9       	ldd	r24, Y+55	; 0x37
    2510:	98 ad       	ldd	r25, Y+56	; 0x38
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e2       	ldi	r20, 0x20	; 32
    2518:	51 e4       	ldi	r21, 0x41	; 65
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	98 ab       	std	Y+48, r25	; 0x30
    2530:	8f a7       	std	Y+47, r24	; 0x2f
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <getUserNewPassword+0xf4>
    2534:	89 e1       	ldi	r24, 0x19	; 25
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9e a7       	std	Y+46, r25	; 0x2e
    253a:	8d a7       	std	Y+45, r24	; 0x2d
    253c:	8d a5       	ldd	r24, Y+45	; 0x2d
    253e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <getUserNewPassword+0xe2>
    2544:	9e a7       	std	Y+46, r25	; 0x2e
    2546:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2548:	8f a5       	ldd	r24, Y+47	; 0x2f
    254a:	98 a9       	ldd	r25, Y+48	; 0x30
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	69 f7       	brne	.-38     	; 0x2534 <getUserNewPassword+0xd6>
    255a:	14 c0       	rjmp	.+40     	; 0x2584 <getUserNewPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255c:	69 a9       	ldd	r22, Y+49	; 0x31
    255e:	7a a9       	ldd	r23, Y+50	; 0x32
    2560:	8b a9       	ldd	r24, Y+51	; 0x33
    2562:	9c a9       	ldd	r25, Y+52	; 0x34
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	98 ab       	std	Y+48, r25	; 0x30
    256e:	8f a7       	std	Y+47, r24	; 0x2f
    2570:	8f a5       	ldd	r24, Y+47	; 0x2f
    2572:	98 a9       	ldd	r25, Y+48	; 0x30
    2574:	9c a7       	std	Y+44, r25	; 0x2c
    2576:	8b a7       	std	Y+43, r24	; 0x2b
    2578:	8b a5       	ldd	r24, Y+43	; 0x2b
    257a:	9c a5       	ldd	r25, Y+44	; 0x2c
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <getUserNewPassword+0x11e>
    2580:	9c a7       	std	Y+44, r25	; 0x2c
    2582:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	LCD_sendCommand(CLEAR_COMMAND);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_displayString("Enter new pass");
    258a:	8d eb       	ldi	r24, 0xBD	; 189
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
    259a:	8b c0       	rjmp	.+278    	; 0x26b2 <getUserNewPassword+0x254>
	while(i<PASS_SIZE){
		if(KEYPAD_getPressedKey()>=0 &&KEYPAD_getPressedKey()<=9){
    259c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    25a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    25a4:	8a 30       	cpi	r24, 0x0A	; 10
    25a6:	08 f0       	brcs	.+2      	; 0x25aa <getUserNewPassword+0x14c>
    25a8:	84 c0       	rjmp	.+264    	; 0x26b2 <getUserNewPassword+0x254>
			pass[i]=KEYPAD_getPressedKey();
    25aa:	89 ad       	ldd	r24, Y+57	; 0x39
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    25b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    25b4:	8c 01       	movw	r16, r24
    25b6:	02 0f       	add	r16, r18
    25b8:	13 1f       	adc	r17, r19
    25ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    25be:	f8 01       	movw	r30, r16
    25c0:	80 83       	st	Z, r24
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	aa e7       	ldi	r26, 0x7A	; 122
    25c8:	b3 e4       	ldi	r27, 0x43	; 67
    25ca:	8f a3       	std	Y+39, r24	; 0x27
    25cc:	98 a7       	std	Y+40, r25	; 0x28
    25ce:	a9 a7       	std	Y+41, r26	; 0x29
    25d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	6f a1       	ldd	r22, Y+39	; 0x27
    25d4:	78 a5       	ldd	r23, Y+40	; 0x28
    25d6:	89 a5       	ldd	r24, Y+41	; 0x29
    25d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a e7       	ldi	r20, 0x7A	; 122
    25e0:	53 e4       	ldi	r21, 0x43	; 67
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8b a3       	std	Y+35, r24	; 0x23
    25ec:	9c a3       	std	Y+36, r25	; 0x24
    25ee:	ad a3       	std	Y+37, r26	; 0x25
    25f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25f2:	6b a1       	ldd	r22, Y+35	; 0x23
    25f4:	7c a1       	ldd	r23, Y+36	; 0x24
    25f6:	8d a1       	ldd	r24, Y+37	; 0x25
    25f8:	9e a1       	ldd	r25, Y+38	; 0x26
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	2c f4       	brge	.+10     	; 0x2614 <getUserNewPassword+0x1b6>
		__ticks = 1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9a a3       	std	Y+34, r25	; 0x22
    2610:	89 a3       	std	Y+33, r24	; 0x21
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <getUserNewPassword+0x234>
	else if (__tmp > 65535)
    2614:	6b a1       	ldd	r22, Y+35	; 0x23
    2616:	7c a1       	ldd	r23, Y+36	; 0x24
    2618:	8d a1       	ldd	r24, Y+37	; 0x25
    261a:	9e a1       	ldd	r25, Y+38	; 0x26
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	4c f5       	brge	.+82     	; 0x267e <getUserNewPassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	6f a1       	ldd	r22, Y+39	; 0x27
    262e:	78 a5       	ldd	r23, Y+40	; 0x28
    2630:	89 a5       	ldd	r24, Y+41	; 0x29
    2632:	9a a5       	ldd	r25, Y+42	; 0x2a
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	51 e4       	ldi	r21, 0x41	; 65
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9a a3       	std	Y+34, r25	; 0x22
    2652:	89 a3       	std	Y+33, r24	; 0x21
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <getUserNewPassword+0x216>
    2656:	89 e1       	ldi	r24, 0x19	; 25
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	98 a3       	std	Y+32, r25	; 0x20
    265c:	8f 8f       	std	Y+31, r24	; 0x1f
    265e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2660:	98 a1       	ldd	r25, Y+32	; 0x20
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <getUserNewPassword+0x204>
    2666:	98 a3       	std	Y+32, r25	; 0x20
    2668:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	89 a1       	ldd	r24, Y+33	; 0x21
    266c:	9a a1       	ldd	r25, Y+34	; 0x22
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	9a a3       	std	Y+34, r25	; 0x22
    2672:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	89 a1       	ldd	r24, Y+33	; 0x21
    2676:	9a a1       	ldd	r25, Y+34	; 0x22
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	69 f7       	brne	.-38     	; 0x2656 <getUserNewPassword+0x1f8>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <getUserNewPassword+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	6b a1       	ldd	r22, Y+35	; 0x23
    2680:	7c a1       	ldd	r23, Y+36	; 0x24
    2682:	8d a1       	ldd	r24, Y+37	; 0x25
    2684:	9e a1       	ldd	r25, Y+38	; 0x26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9a a3       	std	Y+34, r25	; 0x22
    2690:	89 a3       	std	Y+33, r24	; 0x21
    2692:	89 a1       	ldd	r24, Y+33	; 0x21
    2694:	9a a1       	ldd	r25, Y+34	; 0x22
    2696:	9e 8f       	std	Y+30, r25	; 0x1e
    2698:	8d 8f       	std	Y+29, r24	; 0x1d
    269a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    269c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <getUserNewPassword+0x240>
    26a2:	9e 8f       	std	Y+30, r25	; 0x1e
    26a4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			LCD_sendCharacter('*');
    26a6:	8a e2       	ldi	r24, 0x2A	; 42
    26a8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_sendCharacter>
			i++;
    26ac:	89 ad       	ldd	r24, Y+57	; 0x39
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	89 af       	std	Y+57, r24	; 0x39
	LCD_displayString("is 4 digits pin");
	_delay_ms(2000);
	LCD_sendCommand(CLEAR_COMMAND);
	LCD_displayString("Enter new pass");
	LCD_goToRowColumn(1,0);
	while(i<PASS_SIZE){
    26b2:	99 ad       	ldd	r25, Y+57	; 0x39
    26b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    26b6:	98 17       	cp	r25, r24
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <getUserNewPassword+0x25e>
    26ba:	70 cf       	rjmp	.-288    	; 0x259c <getUserNewPassword+0x13e>
			_delay_ms(250);
			LCD_sendCharacter('*');
			i++;
		}
	}
	i=0;
    26bc:	19 ae       	std	Y+57, r1	; 0x39
	LCD_sendCommand(CLEAR_COMMAND);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a8 e4       	ldi	r26, 0x48	; 72
    26ca:	b2 e4       	ldi	r27, 0x42	; 66
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    26ce:	9a 8f       	std	Y+26, r25	; 0x1a
    26d0:	ab 8f       	std	Y+27, r26	; 0x1b
    26d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a e7       	ldi	r20, 0x7A	; 122
    26e2:	53 e4       	ldi	r21, 0x43	; 67
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 8b       	std	Y+21, r24	; 0x15
    26ee:	9e 8b       	std	Y+22, r25	; 0x16
    26f0:	af 8b       	std	Y+23, r26	; 0x17
    26f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <getUserNewPassword+0x2b8>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <getUserNewPassword+0x336>
	else if (__tmp > 65535)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <getUserNewPassword+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	69 8d       	ldd	r22, Y+25	; 0x19
    2730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <getUserNewPassword+0x318>
    2758:	89 e1       	ldi	r24, 0x19	; 25
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	9a 89       	ldd	r25, Y+18	; 0x12
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <getUserNewPassword+0x306>
    2768:	9a 8b       	std	Y+18, r25	; 0x12
    276a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <getUserNewPassword+0x2fa>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <getUserNewPassword+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <getUserNewPassword+0x342>
    27a4:	98 8b       	std	Y+16, r25	; 0x10
    27a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_displayString("RE-enter Pass");
    27a8:	8c ec       	ldi	r24, 0xCC	; 204
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
    27b8:	8b c0       	rjmp	.+278    	; 0x28d0 <getUserNewPassword+0x472>
	while(i<PASS_SIZE){
		if(KEYPAD_getPressedKey()>=0 &&KEYPAD_getPressedKey()<=9){
    27ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    27be:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    27c2:	8a 30       	cpi	r24, 0x0A	; 10
    27c4:	08 f0       	brcs	.+2      	; 0x27c8 <getUserNewPassword+0x36a>
    27c6:	84 c0       	rjmp	.+264    	; 0x28d0 <getUserNewPassword+0x472>
			passMatch[i]=KEYPAD_getPressedKey();
    27c8:	89 ad       	ldd	r24, Y+57	; 0x39
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    27d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    27d2:	8c 01       	movw	r16, r24
    27d4:	02 0f       	add	r16, r18
    27d6:	13 1f       	adc	r17, r19
    27d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    27dc:	f8 01       	movw	r30, r16
    27de:	80 83       	st	Z, r24
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	aa e7       	ldi	r26, 0x7A	; 122
    27e6:	b3 e4       	ldi	r27, 0x43	; 67
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	53 e4       	ldi	r21, 0x43	; 67
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <getUserNewPassword+0x3d4>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <getUserNewPassword+0x452>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <getUserNewPassword+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <getUserNewPassword+0x434>
    2874:	89 e1       	ldi	r24, 0x19	; 25
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <getUserNewPassword+0x422>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <getUserNewPassword+0x416>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <getUserNewPassword+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <getUserNewPassword+0x45e>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LCD_sendCharacter('*');
    28c4:	8a e2       	ldi	r24, 0x2A	; 42
    28c6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_sendCharacter>
			i++;
    28ca:	89 ad       	ldd	r24, Y+57	; 0x39
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	89 af       	std	Y+57, r24	; 0x39
	i=0;
	LCD_sendCommand(CLEAR_COMMAND);
	_delay_ms(50);
	LCD_displayString("RE-enter Pass");
	LCD_goToRowColumn(1,0);
	while(i<PASS_SIZE){
    28d0:	99 ad       	ldd	r25, Y+57	; 0x39
    28d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    28d4:	98 17       	cp	r25, r24
    28d6:	08 f4       	brcc	.+2      	; 0x28da <getUserNewPassword+0x47c>
    28d8:	70 cf       	rjmp	.-288    	; 0x27ba <getUserNewPassword+0x35c>
			_delay_ms(250);
			LCD_sendCharacter('*');
			i++;
		}
	}
	i=0;
    28da:	19 ae       	std	Y+57, r1	; 0x39
}
    28dc:	ee 96       	adiw	r28, 0x3e	; 62
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	08 95       	ret

000028f2 <checkNewPasswordMatching>:

void checkNewPasswordMatching(uint8 * pass, uint8 * passMatch,uint8 *currentPass, uint8 PASS_SIZE){
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	a5 97       	sbiw	r28, 0x25	; 37
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	98 a3       	std	Y+32, r25	; 0x20
    2908:	8f 8f       	std	Y+31, r24	; 0x1f
    290a:	7a a3       	std	Y+34, r23	; 0x22
    290c:	69 a3       	std	Y+33, r22	; 0x21
    290e:	5c a3       	std	Y+36, r21	; 0x24
    2910:	4b a3       	std	Y+35, r20	; 0x23
    2912:	2d a3       	std	Y+37, r18	; 0x25
	uint8 i = 0;
    2914:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 errorFlag=1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<PASS_SIZE;i++){
    291a:	1e 8e       	std	Y+30, r1	; 0x1e
    291c:	a8 c0       	rjmp	.+336    	; 0x2a6e <checkNewPasswordMatching+0x17c>
		if(passMatch[i]!=pass[i]){
    291e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	89 a1       	ldd	r24, Y+33	; 0x21
    2926:	9a a1       	ldd	r25, Y+34	; 0x22
    2928:	fc 01       	movw	r30, r24
    292a:	e2 0f       	add	r30, r18
    292c:	f3 1f       	adc	r31, r19
    292e:	40 81       	ld	r20, Z
    2930:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2938:	98 a1       	ldd	r25, Y+32	; 0x20
    293a:	fc 01       	movw	r30, r24
    293c:	e2 0f       	add	r30, r18
    293e:	f3 1f       	adc	r31, r19
    2940:	80 81       	ld	r24, Z
    2942:	48 17       	cp	r20, r24
    2944:	09 f4       	brne	.+2      	; 0x2948 <checkNewPasswordMatching+0x56>
    2946:	90 c0       	rjmp	.+288    	; 0x2a68 <checkNewPasswordMatching+0x176>
			errorFlag=0;
    2948:	1d 8e       	std	Y+29, r1	; 0x1d
			LCD_sendCommand(CLEAR_COMMAND);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e8       	ldi	r26, 0x80	; 128
    2956:	bf e3       	ldi	r27, 0x3F	; 63
    2958:	89 8f       	std	Y+25, r24	; 0x19
    295a:	9a 8f       	std	Y+26, r25	; 0x1a
    295c:	ab 8f       	std	Y+27, r26	; 0x1b
    295e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	69 8d       	ldd	r22, Y+25	; 0x19
    2962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	53 e4       	ldi	r21, 0x43	; 67
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8d 8b       	std	Y+21, r24	; 0x15
    297a:	9e 8b       	std	Y+22, r25	; 0x16
    297c:	af 8b       	std	Y+23, r26	; 0x17
    297e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2980:	6d 89       	ldd	r22, Y+21	; 0x15
    2982:	7e 89       	ldd	r23, Y+22	; 0x16
    2984:	8f 89       	ldd	r24, Y+23	; 0x17
    2986:	98 8d       	ldd	r25, Y+24	; 0x18
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <checkNewPasswordMatching+0xb0>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <checkNewPasswordMatching+0x12e>
	else if (__tmp > 65535)
    29a2:	6d 89       	ldd	r22, Y+21	; 0x15
    29a4:	7e 89       	ldd	r23, Y+22	; 0x16
    29a6:	8f 89       	ldd	r24, Y+23	; 0x17
    29a8:	98 8d       	ldd	r25, Y+24	; 0x18
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <checkNewPasswordMatching+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	69 8d       	ldd	r22, Y+25	; 0x19
    29bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9c 8b       	std	Y+20, r25	; 0x14
    29e0:	8b 8b       	std	Y+19, r24	; 0x13
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <checkNewPasswordMatching+0x110>
    29e4:	89 e1       	ldi	r24, 0x19	; 25
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9a 8b       	std	Y+18, r25	; 0x12
    29ea:	89 8b       	std	Y+17, r24	; 0x11
    29ec:	89 89       	ldd	r24, Y+17	; 0x11
    29ee:	9a 89       	ldd	r25, Y+18	; 0x12
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <checkNewPasswordMatching+0xfe>
    29f4:	9a 8b       	std	Y+18, r25	; 0x12
    29f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <checkNewPasswordMatching+0xf2>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <checkNewPasswordMatching+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	98 8b       	std	Y+16, r25	; 0x10
    2a26:	8f 87       	std	Y+15, r24	; 0x0f
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	98 89       	ldd	r25, Y+16	; 0x10
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <checkNewPasswordMatching+0x13a>
    2a30:	98 8b       	std	Y+16, r25	; 0x10
    2a32:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			LCD_displayString("pass not match");
    2a34:	8a ed       	ldi	r24, 0xDA	; 218
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
			LCD_displayString("repeat: enter 0");
    2a44:	89 ee       	ldi	r24, 0xE9	; 233
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
			while(KEYPAD_getPressedKey()!=0);
    2a4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2a50:	88 23       	and	r24, r24
    2a52:	e1 f7       	brne	.-8      	; 0x2a4c <checkNewPasswordMatching+0x15a>
			errorFlag=1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	8d 8f       	std	Y+29, r24	; 0x1d
			getUserNewPassword(pass,passMatch,PASS_SIZE);
    2a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a5c:	29 a1       	ldd	r18, Y+33	; 0x21
    2a5e:	3a a1       	ldd	r19, Y+34	; 0x22
    2a60:	b9 01       	movw	r22, r18
    2a62:	4d a1       	ldd	r20, Y+37	; 0x25
    2a64:	0e 94 2f 12 	call	0x245e	; 0x245e <getUserNewPassword>
}

void checkNewPasswordMatching(uint8 * pass, uint8 * passMatch,uint8 *currentPass, uint8 PASS_SIZE){
	uint8 i = 0;
	uint8 errorFlag=1;
	for(i=0;i<PASS_SIZE;i++){
    2a68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a70:	8d a1       	ldd	r24, Y+37	; 0x25
    2a72:	98 17       	cp	r25, r24
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <checkNewPasswordMatching+0x186>
    2a76:	53 cf       	rjmp	.-346    	; 0x291e <checkNewPasswordMatching+0x2c>
			while(KEYPAD_getPressedKey()!=0);
			errorFlag=1;
			getUserNewPassword(pass,passMatch,PASS_SIZE);
		}
	}
	if(errorFlag==1){
    2a78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <checkNewPasswordMatching+0x18e>
    2a7e:	81 c0       	rjmp	.+258    	; 0x2b82 <checkNewPasswordMatching+0x290>
		LCD_sendCommand(CLEAR_COMMAND);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	8b 87       	std	Y+11, r24	; 0x0b
    2a90:	9c 87       	std	Y+12, r25	; 0x0c
    2a92:	ad 87       	std	Y+13, r26	; 0x0d
    2a94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a e7       	ldi	r20, 0x7A	; 122
    2aa4:	53 e4       	ldi	r21, 0x43	; 67
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8f 83       	std	Y+7, r24	; 0x07
    2ab0:	98 87       	std	Y+8, r25	; 0x08
    2ab2:	a9 87       	std	Y+9, r26	; 0x09
    2ab4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <checkNewPasswordMatching+0x1e6>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <checkNewPasswordMatching+0x264>
	else if (__tmp > 65535)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <checkNewPasswordMatching+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <checkNewPasswordMatching+0x246>
    2b1a:	89 e1       	ldi	r24, 0x19	; 25
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <checkNewPasswordMatching+0x234>
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <checkNewPasswordMatching+0x228>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <checkNewPasswordMatching+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	9a 81       	ldd	r25, Y+2	; 0x02
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <checkNewPasswordMatching+0x270>
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_displayString("new pass is set");
    2b6a:	89 ef       	ldi	r24, 0xF9	; 249
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
		 setNewUserPassword(pass,currentPass,PASS_SIZE);
    2b72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b74:	98 a1       	ldd	r25, Y+32	; 0x20
    2b76:	2b a1       	ldd	r18, Y+35	; 0x23
    2b78:	3c a1       	ldd	r19, Y+36	; 0x24
    2b7a:	b9 01       	movw	r22, r18
    2b7c:	4d a1       	ldd	r20, Y+37	; 0x25
    2b7e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <setNewUserPassword>
	}

}
    2b82:	a5 96       	adiw	r28, 0x25	; 37
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <setNewUserPassword>:
void setNewUserPassword(uint8 * pass ,uint8 * currentPass, uint8 PASS_SIZE){
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <setNewUserPassword+0x6>
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <setNewUserPassword+0x8>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <setNewUserPassword+0xa>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	9b 83       	std	Y+3, r25	; 0x03
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
    2ba6:	7d 83       	std	Y+5, r23	; 0x05
    2ba8:	6c 83       	std	Y+4, r22	; 0x04
    2baa:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	for(i=0; i<PASS_SIZE;i++){
    2bac:	19 82       	std	Y+1, r1	; 0x01
    2bae:	15 c0       	rjmp	.+42     	; 0x2bda <setNewUserPassword+0x46>
		currentPass[i]=pass[i];
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bba:	dc 01       	movw	r26, r24
    2bbc:	a2 0f       	add	r26, r18
    2bbe:	b3 1f       	adc	r27, r19
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	fc 01       	movw	r30, r24
    2bcc:	e2 0f       	add	r30, r18
    2bce:	f3 1f       	adc	r31, r19
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8c 93       	st	X, r24
	}

}
void setNewUserPassword(uint8 * pass ,uint8 * currentPass, uint8 PASS_SIZE){
	uint8 i;
	for(i=0; i<PASS_SIZE;i++){
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	99 81       	ldd	r25, Y+1	; 0x01
    2bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bde:	98 17       	cp	r25, r24
    2be0:	38 f3       	brcs	.-50     	; 0x2bb0 <setNewUserPassword+0x1c>
		currentPass[i]=pass[i];
	}
}
    2be2:	26 96       	adiw	r28, 0x06	; 6
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <getUserPasswordToOpenDoor>:

void getUserPasswordToOpenDoor(uint8 * pass,uint8 PASS_SIZE){
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	ae 97       	sbiw	r28, 0x2e	; 46
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	9d a7       	std	Y+45, r25	; 0x2d
    2c0e:	8c a7       	std	Y+44, r24	; 0x2c
    2c10:	6e a7       	std	Y+46, r22	; 0x2e
	uint8 j =0;
    2c12:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_sendCommand(CLEAR_COMMAND);
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a8 e4       	ldi	r26, 0x48	; 72
    2c20:	b2 e4       	ldi	r27, 0x42	; 66
    2c22:	8f a3       	std	Y+39, r24	; 0x27
    2c24:	98 a7       	std	Y+40, r25	; 0x28
    2c26:	a9 a7       	std	Y+41, r26	; 0x29
    2c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	53 e4       	ldi	r21, 0x43	; 67
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8b a3       	std	Y+35, r24	; 0x23
    2c44:	9c a3       	std	Y+36, r25	; 0x24
    2c46:	ad a3       	std	Y+37, r26	; 0x25
    2c48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c50:	9e a1       	ldd	r25, Y+38	; 0x26
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <getUserPasswordToOpenDoor+0x78>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <getUserPasswordToOpenDoor+0xf6>
	else if (__tmp > 65535)
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <getUserPasswordToOpenDoor+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6f a1       	ldd	r22, Y+39	; 0x27
    2c86:	78 a5       	ldd	r23, Y+40	; 0x28
    2c88:	89 a5       	ldd	r24, Y+41	; 0x29
    2c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9a a3       	std	Y+34, r25	; 0x22
    2caa:	89 a3       	std	Y+33, r24	; 0x21
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <getUserPasswordToOpenDoor+0xd8>
    2cae:	89 e1       	ldi	r24, 0x19	; 25
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cb8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <getUserPasswordToOpenDoor+0xc6>
    2cbe:	98 a3       	std	Y+32, r25	; 0x20
    2cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cce:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <getUserPasswordToOpenDoor+0xba>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <getUserPasswordToOpenDoor+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cda:	8d a1       	ldd	r24, Y+37	; 0x25
    2cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <getUserPasswordToOpenDoor+0x102>
    2cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cfc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_displayString("pass to open:");
    2cfe:	89 e0       	ldi	r24, 0x09	; 9
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
    2d0e:	8b c0       	rjmp	.+278    	; 0x2e26 <getUserPasswordToOpenDoor+0x232>
	while(j<PASS_SIZE){
		if(KEYPAD_getPressedKey()>=0 &&KEYPAD_getPressedKey()<=9){
    2d10:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2d14:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2d18:	8a 30       	cpi	r24, 0x0A	; 10
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <getUserPasswordToOpenDoor+0x12a>
    2d1c:	84 c0       	rjmp	.+264    	; 0x2e26 <getUserPasswordToOpenDoor+0x232>
			pass[j]=KEYPAD_getPressedKey();
    2d1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d26:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d28:	8c 01       	movw	r16, r24
    2d2a:	02 0f       	add	r16, r18
    2d2c:	13 1f       	adc	r17, r19
    2d2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2d32:	f8 01       	movw	r30, r16
    2d34:	80 83       	st	Z, r24
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a6 e9       	ldi	r26, 0x96	; 150
    2d3c:	b3 e4       	ldi	r27, 0x43	; 67
    2d3e:	89 8f       	std	Y+25, r24	; 0x19
    2d40:	9a 8f       	std	Y+26, r25	; 0x1a
    2d42:	ab 8f       	std	Y+27, r26	; 0x1b
    2d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	69 8d       	ldd	r22, Y+25	; 0x19
    2d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a e7       	ldi	r20, 0x7A	; 122
    2d54:	53 e4       	ldi	r21, 0x43	; 67
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8d 8b       	std	Y+21, r24	; 0x15
    2d60:	9e 8b       	std	Y+22, r25	; 0x16
    2d62:	af 8b       	std	Y+23, r26	; 0x17
    2d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d66:	6d 89       	ldd	r22, Y+21	; 0x15
    2d68:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <getUserPasswordToOpenDoor+0x194>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9c 8b       	std	Y+20, r25	; 0x14
    2d84:	8b 8b       	std	Y+19, r24	; 0x13
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <getUserPasswordToOpenDoor+0x212>
	else if (__tmp > 65535)
    2d88:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <getUserPasswordToOpenDoor+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	69 8d       	ldd	r22, Y+25	; 0x19
    2da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9c 8b       	std	Y+20, r25	; 0x14
    2dc6:	8b 8b       	std	Y+19, r24	; 0x13
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <getUserPasswordToOpenDoor+0x1f4>
    2dca:	89 e1       	ldi	r24, 0x19	; 25
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9a 8b       	std	Y+18, r25	; 0x12
    2dd0:	89 8b       	std	Y+17, r24	; 0x11
    2dd2:	89 89       	ldd	r24, Y+17	; 0x11
    2dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <getUserPasswordToOpenDoor+0x1e2>
    2dda:	9a 8b       	std	Y+18, r25	; 0x12
    2ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8b 89       	ldd	r24, Y+19	; 0x13
    2de0:	9c 89       	ldd	r25, Y+20	; 0x14
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <getUserPasswordToOpenDoor+0x1d6>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <getUserPasswordToOpenDoor+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6d 89       	ldd	r22, Y+21	; 0x15
    2df4:	7e 89       	ldd	r23, Y+22	; 0x16
    2df6:	8f 89       	ldd	r24, Y+23	; 0x17
    2df8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
    2e06:	8b 89       	ldd	r24, Y+19	; 0x13
    2e08:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0a:	98 8b       	std	Y+16, r25	; 0x10
    2e0c:	8f 87       	std	Y+15, r24	; 0x0f
    2e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e10:	98 89       	ldd	r25, Y+16	; 0x10
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <getUserPasswordToOpenDoor+0x21e>
    2e16:	98 8b       	std	Y+16, r25	; 0x10
    2e18:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			LCD_sendCharacter('*');
    2e1a:	8a e2       	ldi	r24, 0x2A	; 42
    2e1c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_sendCharacter>
			j++;
    2e20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 j =0;
	LCD_sendCommand(CLEAR_COMMAND);
	_delay_ms(50);
	LCD_displayString("pass to open:");
	LCD_goToRowColumn(1,0);
	while(j<PASS_SIZE){
    2e26:	9b a5       	ldd	r25, Y+43	; 0x2b
    2e28:	8e a5       	ldd	r24, Y+46	; 0x2e
    2e2a:	98 17       	cp	r25, r24
    2e2c:	08 f4       	brcc	.+2      	; 0x2e30 <getUserPasswordToOpenDoor+0x23c>
    2e2e:	70 cf       	rjmp	.-288    	; 0x2d10 <getUserPasswordToOpenDoor+0x11c>
			_delay_ms(300);
			LCD_sendCharacter('*');
			j++;
		}
	}
	j=0;
    2e30:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_sendCommand(CLEAR_COMMAND);
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a8 e4       	ldi	r26, 0x48	; 72
    2e3e:	b2 e4       	ldi	r27, 0x42	; 66
    2e40:	8b 87       	std	Y+11, r24	; 0x0b
    2e42:	9c 87       	std	Y+12, r25	; 0x0c
    2e44:	ad 87       	std	Y+13, r26	; 0x0d
    2e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a e7       	ldi	r20, 0x7A	; 122
    2e56:	53 e4       	ldi	r21, 0x43	; 67
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8f 83       	std	Y+7, r24	; 0x07
    2e62:	98 87       	std	Y+8, r25	; 0x08
    2e64:	a9 87       	std	Y+9, r26	; 0x09
    2e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e68:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6a:	78 85       	ldd	r23, Y+8	; 0x08
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <getUserPasswordToOpenDoor+0x296>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	3f c0       	rjmp	.+126    	; 0x2f08 <getUserPasswordToOpenDoor+0x314>
	else if (__tmp > 65535)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	3f ef       	ldi	r19, 0xFF	; 255
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	57 e4       	ldi	r21, 0x47	; 71
    2e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9e:	18 16       	cp	r1, r24
    2ea0:	4c f5       	brge	.+82     	; 0x2ef4 <getUserPasswordToOpenDoor+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <getUserPasswordToOpenDoor+0x2f6>
    2ecc:	89 e1       	ldi	r24, 0x19	; 25
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <getUserPasswordToOpenDoor+0x2e4>
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	69 f7       	brne	.-38     	; 0x2ecc <getUserPasswordToOpenDoor+0x2d8>
    2ef2:	14 c0       	rjmp	.+40     	; 0x2f1c <getUserPasswordToOpenDoor+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <getUserPasswordToOpenDoor+0x320>
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_displayString("please wait...");
    2f1c:	87 e1       	ldi	r24, 0x17	; 23
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    2f24:	ae 96       	adiw	r28, 0x2e	; 46
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <__prologue_saves__>:
    2f3a:	2f 92       	push	r2
    2f3c:	3f 92       	push	r3
    2f3e:	4f 92       	push	r4
    2f40:	5f 92       	push	r5
    2f42:	6f 92       	push	r6
    2f44:	7f 92       	push	r7
    2f46:	8f 92       	push	r8
    2f48:	9f 92       	push	r9
    2f4a:	af 92       	push	r10
    2f4c:	bf 92       	push	r11
    2f4e:	cf 92       	push	r12
    2f50:	df 92       	push	r13
    2f52:	ef 92       	push	r14
    2f54:	ff 92       	push	r15
    2f56:	0f 93       	push	r16
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	ca 1b       	sub	r28, r26
    2f64:	db 0b       	sbc	r29, r27
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	09 94       	ijmp

00002f72 <__epilogue_restores__>:
    2f72:	2a 88       	ldd	r2, Y+18	; 0x12
    2f74:	39 88       	ldd	r3, Y+17	; 0x11
    2f76:	48 88       	ldd	r4, Y+16	; 0x10
    2f78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f84:	b9 84       	ldd	r11, Y+9	; 0x09
    2f86:	c8 84       	ldd	r12, Y+8	; 0x08
    2f88:	df 80       	ldd	r13, Y+7	; 0x07
    2f8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f90:	1b 81       	ldd	r17, Y+3	; 0x03
    2f92:	aa 81       	ldd	r26, Y+2	; 0x02
    2f94:	b9 81       	ldd	r27, Y+1	; 0x01
    2f96:	ce 0f       	add	r28, r30
    2f98:	d1 1d       	adc	r29, r1
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	ed 01       	movw	r28, r26
    2fa6:	08 95       	ret

00002fa8 <itoa>:
    2fa8:	fb 01       	movw	r30, r22
    2faa:	9f 01       	movw	r18, r30
    2fac:	e8 94       	clt
    2fae:	42 30       	cpi	r20, 0x02	; 2
    2fb0:	c4 f0       	brlt	.+48     	; 0x2fe2 <itoa+0x3a>
    2fb2:	45 32       	cpi	r20, 0x25	; 37
    2fb4:	b4 f4       	brge	.+44     	; 0x2fe2 <itoa+0x3a>
    2fb6:	4a 30       	cpi	r20, 0x0A	; 10
    2fb8:	29 f4       	brne	.+10     	; 0x2fc4 <itoa+0x1c>
    2fba:	97 fb       	bst	r25, 7
    2fbc:	1e f4       	brtc	.+6      	; 0x2fc4 <itoa+0x1c>
    2fbe:	90 95       	com	r25
    2fc0:	81 95       	neg	r24
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	64 2f       	mov	r22, r20
    2fc6:	77 27       	eor	r23, r23
    2fc8:	0e 94 05 18 	call	0x300a	; 0x300a <__udivmodhi4>
    2fcc:	80 5d       	subi	r24, 0xD0	; 208
    2fce:	8a 33       	cpi	r24, 0x3A	; 58
    2fd0:	0c f0       	brlt	.+2      	; 0x2fd4 <itoa+0x2c>
    2fd2:	89 5d       	subi	r24, 0xD9	; 217
    2fd4:	81 93       	st	Z+, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	a1 f7       	brne	.-24     	; 0x2fc4 <itoa+0x1c>
    2fdc:	16 f4       	brtc	.+4      	; 0x2fe2 <itoa+0x3a>
    2fde:	5d e2       	ldi	r21, 0x2D	; 45
    2fe0:	51 93       	st	Z+, r21
    2fe2:	10 82       	st	Z, r1
    2fe4:	c9 01       	movw	r24, r18
    2fe6:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <strrev>

00002fea <strrev>:
    2fea:	dc 01       	movw	r26, r24
    2fec:	fc 01       	movw	r30, r24
    2fee:	67 2f       	mov	r22, r23
    2ff0:	71 91       	ld	r23, Z+
    2ff2:	77 23       	and	r23, r23
    2ff4:	e1 f7       	brne	.-8      	; 0x2fee <strrev+0x4>
    2ff6:	32 97       	sbiw	r30, 0x02	; 2
    2ff8:	04 c0       	rjmp	.+8      	; 0x3002 <strrev+0x18>
    2ffa:	7c 91       	ld	r23, X
    2ffc:	6d 93       	st	X+, r22
    2ffe:	70 83       	st	Z, r23
    3000:	62 91       	ld	r22, -Z
    3002:	ae 17       	cp	r26, r30
    3004:	bf 07       	cpc	r27, r31
    3006:	c8 f3       	brcs	.-14     	; 0x2ffa <strrev+0x10>
    3008:	08 95       	ret

0000300a <__udivmodhi4>:
    300a:	aa 1b       	sub	r26, r26
    300c:	bb 1b       	sub	r27, r27
    300e:	51 e1       	ldi	r21, 0x11	; 17
    3010:	07 c0       	rjmp	.+14     	; 0x3020 <__udivmodhi4_ep>

00003012 <__udivmodhi4_loop>:
    3012:	aa 1f       	adc	r26, r26
    3014:	bb 1f       	adc	r27, r27
    3016:	a6 17       	cp	r26, r22
    3018:	b7 07       	cpc	r27, r23
    301a:	10 f0       	brcs	.+4      	; 0x3020 <__udivmodhi4_ep>
    301c:	a6 1b       	sub	r26, r22
    301e:	b7 0b       	sbc	r27, r23

00003020 <__udivmodhi4_ep>:
    3020:	88 1f       	adc	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	5a 95       	dec	r21
    3026:	a9 f7       	brne	.-22     	; 0x3012 <__udivmodhi4_loop>
    3028:	80 95       	com	r24
    302a:	90 95       	com	r25
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	08 95       	ret

00003032 <_exit>:
    3032:	f8 94       	cli

00003034 <__stop_program>:
    3034:	ff cf       	rjmp	.-2      	; 0x3034 <__stop_program>
